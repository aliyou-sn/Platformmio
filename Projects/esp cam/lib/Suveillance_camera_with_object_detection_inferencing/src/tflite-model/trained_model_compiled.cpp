/* Generated by Edge Impulse
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
// Generated on: 10.07.2023 11:32:11

#include <stdio.h>
#include <stdlib.h>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#if defined __GNUC__
#define ALIGN(X) __attribute__((aligned(X)))
#elif defined _MSC_VER
#define ALIGN(X) __declspec(align(X))
#elif defined __TASKING__
#define ALIGN(X) __align(X)
#endif

#ifndef EI_MAX_SCRATCH_BUFFER_COUNT
#define EI_MAX_SCRATCH_BUFFER_COUNT 14
#endif // EI_MAX_SCRATCH_BUFFER_COUNT

#ifndef EI_MAX_OVERFLOW_BUFFER_COUNT
#define EI_MAX_OVERFLOW_BUFFER_COUNT 10
#endif // EI_MAX_OVERFLOW_BUFFER_COUNT

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX) || defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
constexpr int kTensorArenaSize = 70128;
#else
constexpr int kTensorArenaSize = 69104;
#endif

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};
enum used_operators_e {
  OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_ADD, OP_PAD, OP_SOFTMAX,  OP_LAST
};
struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};
struct NodeInfo_t { // subset of TfLiteNode used for initialization from constant memory
  struct TfLiteIntArray* inputs;
  struct TfLiteIntArray* outputs;
  void* builtin_data;
  used_operators_e used_op_index;
};

typedef struct {
  TfLiteTensor tensor;
  int16_t index;
} TfLiteTensorWithIndex;

typedef struct {
  TfLiteEvalTensor tensor;
  int16_t index;
} TfLiteEvalTensorWithIndex;

TfLiteContext ctx{};
static const int MAX_TFL_TENSOR_COUNT = 4;
static TfLiteTensorWithIndex tflTensors[MAX_TFL_TENSOR_COUNT];
static const int MAX_TFL_EVAL_COUNT = 4;
static TfLiteEvalTensorWithIndex tflEvalTensors[MAX_TFL_EVAL_COUNT];
TfLiteRegistration registrations[OP_LAST];
TfLiteNode tflNodes[28];

const TfArray<4, int> tensor_dimension0 = { 4, { 1,48,48,1 } };
const TfArray<1, float> quant0_scale = { 1, { 0.0039215688593685627, } };
const TfArray<1, int> quant0_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const ALIGN(16) int32_t tensor_data1[4*2] = { 
  0, 0, 
  0, 1, 
  0, 1, 
  0, 0, 
};
const TfArray<2, int> tensor_dimension1 = { 2, { 4,2 } };
const ALIGN(16) int8_t tensor_data2[8*3*3*1] = { 
  /* [0][0][][] */ -57, 49, 8, 
  /* [0][1][][] */ -127, 119, -1, 
  /* [0][2][][] */ -43, 44, -2, 
  /* [1][0][][] */ 59, 127, 36, 
  /* [1][1][][] */ -65, -77, -42, 
  /* [1][2][][] */ 9, -40, 8, 
  /* [2][0][][] */ 30, 27, -47, 
  /* [2][1][][] */ 51, 68, -127, 
  /* [2][2][][] */ 19, 30, -59, 
  /* [3][0][][] */ 43, 54, 21, 
  /* [3][1][][] */ 54, 75, 27, 
  /* [3][2][][] */ -80, -127, -57, 
  /* [4][0][][] */ 6, -52, 49, 
  /* [4][1][][] */ 18, -127, 114, 
  /* [4][2][][] */ 7, -35, 34, 
  /* [5][0][][] */ 2, -56, 0, 
  /* [5][1][][] */ 0, 127, 2, 
  /* [5][2][][] */ 1, -75, 0, 
  /* [6][0][][] */ -17, -98, 0, 
  /* [6][1][][] */ -21, -127, 1, 
  /* [6][2][][] */ -8, -53, 13, 
  /* [7][0][][] */ 44, -127, 25, 
  /* [7][1][][] */ -18, -5, -13, 
  /* [7][2][][] */ -22, 73, -14, 
};
const TfArray<4, int> tensor_dimension2 = { 4, { 8,3,3,1 } };
const TfArray<8, float> quant2_scale = { 8, { 0.036070868372917175, 0.053314540535211563, 0.032143186777830124, 0.021926438435912132, 0.048049017786979675, 0.076923809945583344, 0.0040977634489536285, 0.010905186645686626, } };
const TfArray<8, int> quant2_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant2 = { (TfLiteFloatArray*)&quant2_scale, (TfLiteIntArray*)&quant2_zero, 0 };
const ALIGN(16) int32_t tensor_data3[8] = { 19582, 7955, 1435, 29524, 1400, 7717, 72046, 5143, };
const TfArray<1, int> tensor_dimension3 = { 1, { 8 } };
const TfArray<8, float> quant3_scale = { 8, { 0.00014145439490675926, 0.00020907663565594703, 0.00012605171650648117, 8.598603744758293e-05, 0.00018842752615455538, 0.00030166201759129763, 1.6069661796791479e-05, 4.2765441321535036e-05, } };
const TfArray<8, int> quant3_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant3 = { (TfLiteFloatArray*)&quant3_scale, (TfLiteIntArray*)&quant3_zero, 0 };
const ALIGN(16) int8_t tensor_data4[1*3*3*8] = { 
  /* [0][0][][] */ 0,3,12,18,13,1,8,34, 8,4,-41,127,-21,2,-4,31, -4,1,-5,15,5,3,-6,28, 
  /* [0][1][][] */ -4,1,127,-21,127,5,-111,49, 127,-127,-107,6,-103,127,-14,-127, -31,5,22,-21,0,2,127,44, 
  /* [0][2][][] */ 1,1,7,4,4,-4,16,43, 3,4,-49,-1,-24,-3,-10,-101, -11,0,-5,2,-2,0,-6,50, 
};
const TfArray<4, int> tensor_dimension4 = { 4, { 1,3,3,8 } };
const TfArray<8, float> quant4_scale = { 8, { 0.011996092274785042, 0.016136499121785164, 0.0079492637887597084, 0.014079124666750431, 0.010249360464513302, 0.012770316563546658, 0.034712258726358414, 0.073589175939559937, } };
const TfArray<8, int> quant4_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant4 = { (TfLiteFloatArray*)&quant4_scale, (TfLiteIntArray*)&quant4_zero, 3 };
const ALIGN(16) int32_t tensor_data5[8] = { -9961, 9821, 583, -12648, -407, -14152, 337, 148, };
const TfArray<1, int> tensor_dimension5 = { 1, { 8 } };
const TfArray<8, float> quant5_scale = { 8, { 0.00028226099675521255, 0.00037968234391883016, 0.00018704149988479912, 0.00033127353526651859, 0.00024116142594721168, 0.00030047804466448724, 0.00081675907131284475, 0.0017315100412815809, } };
const TfArray<8, int> quant5_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant5 = { (TfLiteFloatArray*)&quant5_scale, (TfLiteIntArray*)&quant5_zero, 0 };
const ALIGN(16) int8_t tensor_data6[8*1*1*8] = { 
  /* [0][0][][] */ -24,-6,-52,-39,-19,40,-127,-18, 
  /* [1][0][][] */ 12,88,-4,127,5,-6,-16,-46, 
  /* [2][0][][] */ 127,-13,-35,-55,-63,50,101,-44, 
  /* [3][0][][] */ 3,-127,37,-79,14,-86,18,53, 
  /* [4][0][][] */ 127,-3,-53,1,34,-7,-125,-39, 
  /* [5][0][][] */ 6,-31,3,37,3,-127,4,12, 
  /* [6][0][][] */ 127,-20,114,1,107,-32,-5,11, 
  /* [7][0][][] */ -127,1,-91,-1,-97,2,30,4, 
};
const TfArray<4, int> tensor_dimension6 = { 4, { 8,1,1,8 } };
const TfArray<8, float> quant6_scale = { 8, { 0.0029865761753171682, 0.0062305675819516182, 0.004174692090600729, 0.002635603304952383, 0.0056105712428689003, 0.0071118529886007309, 0.0040874672122299671, 0.0077790501527488232, } };
const TfArray<8, int> quant6_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant6 = { (TfLiteFloatArray*)&quant6_scale, (TfLiteIntArray*)&quant6_zero, 0 };
const ALIGN(16) int32_t tensor_data7[8] = { 4730, -4474, -352, 3887, 1813, 626, -3353, 2858, };
const TfArray<1, int> tensor_dimension7 = { 1, { 8 } };
const TfArray<8, float> quant7_scale = { 8, { 7.0272384618874639e-05, 0.00014660159649793059, 9.822805441217497e-05, 6.2014194554649293e-05, 0.0001320134470006451, 0.00016733772645238787, 9.6175703220069408e-05, 0.00018303647811990231, } };
const TfArray<8, int> quant7_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&quant7_zero, 0 };
const ALIGN(16) int8_t tensor_data8[48*1*1*8] = { 
  /* [0][0][][] */ -88,-102,26,-127,-54,-6,-4,3, 
  /* [1][0][][] */ -127,-1,89,1,-48,26,3,15, 
  /* [2][0][][] */ 33,-22,32,127,32,-35,-16,-10, 
  /* [3][0][][] */ -116,-86,-25,-26,39,127,-52,-33, 
  /* [4][0][][] */ -4,-30,-17,-3,-3,10,-127,-73, 
  /* [5][0][][] */ 5,-31,-18,0,-6,12,-127,-80, 
  /* [6][0][][] */ 127,10,12,-7,-60,18,3,-7, 
  /* [7][0][][] */ -127,-23,-17,6,76,13,-1,7, 
  /* [8][0][][] */ 26,30,-13,-14,-28,-127,34,20, 
  /* [9][0][][] */ 76,25,-19,-10,-20,4,-7,127, 
  /* [10][0][][] */ 113,-19,-113,-1,-93,-19,41,127, 
  /* [11][0][][] */ -127,116,5,-47,90,-82,4,28, 
  /* [12][0][][] */ 127,-20,-109,15,55,-4,-9,-21, 
  /* [13][0][][] */ 127,10,3,-8,-22,28,-1,-9, 
  /* [14][0][][] */ -127,-113,113,-50,74,-32,-52,-125, 
  /* [15][0][][] */ 48,65,10,-9,0,-127,-9,1, 
  /* [16][0][][] */ -12,-70,16,1,12,127,13,3, 
  /* [17][0][][] */ 34,-127,-55,-8,-30,98,-55,-16, 
  /* [18][0][][] */ 43,-14,-20,-21,-19,35,127,-7, 
  /* [19][0][][] */ 0,25,1,-127,-4,31,3,-16, 
  /* [20][0][][] */ -80,-29,80,17,51,101,0,-127, 
  /* [21][0][][] */ -20,-5,45,-22,-14,12,-127,-91, 
  /* [22][0][][] */ 79,-10,20,127,-9,-12,62,34, 
  /* [23][0][][] */ 127,-10,-105,-12,30,-23,9,5, 
  /* [24][0][][] */ -31,25,23,33,12,0,-127,-87, 
  /* [25][0][][] */ 127,16,-93,5,14,-1,8,25, 
  /* [26][0][][] */ 2,53,-30,-127,-33,21,5,1, 
  /* [27][0][][] */ 127,6,-109,-14,-108,55,21,85, 
  /* [28][0][][] */ -127,-19,-28,18,53,15,-5,36, 
  /* [29][0][][] */ -5,-127,-11,-120,-7,27,-12,-25, 
  /* [30][0][][] */ -6,89,124,39,20,-106,127,28, 
  /* [31][0][][] */ -62,-6,-127,40,8,-26,85,95, 
  /* [32][0][][] */ -7,-127,0,-118,-12,15,-12,-19, 
  /* [33][0][][] */ 8,-127,7,-111,4,15,9,-25, 
  /* [34][0][][] */ -25,-38,27,-82,36,-47,127,69, 
  /* [35][0][][] */ -127,12,40,-1,-101,-13,35,88, 
  /* [36][0][][] */ -127,28,97,-18,-28,18,-33,26, 
  /* [37][0][][] */ 127,10,-3,0,-75,14,-2,19, 
  /* [38][0][][] */ -84,4,117,50,78,-61,73,127, 
  /* [39][0][][] */ -127,-2,69,-2,-67,11,-12,9, 
  /* [40][0][][] */ 1,18,46,-26,27,2,127,44, 
  /* [41][0][][] */ 127,-8,-75,0,56,9,7,-8, 
  /* [42][0][][] */ -21,-127,34,-2,9,10,1,-21, 
  /* [43][0][][] */ 12,127,121,-12,63,-105,85,12, 
  /* [44][0][][] */ 11,-11,-5,127,9,-126,2,-2, 
  /* [45][0][][] */ 127,-34,40,-12,-61,99,7,4, 
  /* [46][0][][] */ 15,115,-19,103,2,127,24,36, 
  /* [47][0][][] */ -12,37,23,-27,22,-43,127,63, 
};
const TfArray<4, int> tensor_dimension8 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant8_scale = { 48, { 0.0054283244535326958, 0.0070414207875728607, 0.0013611712493002415, 0.009227328933775425, 0.0040500187315046787, 0.0033607932273298502, 0.020838983356952667, 0.012807363644242287, 0.014786442741751671, 0.0070643587969243526, 0.0013981381198391318, 0.0056563508696854115, 0.0053938827477395535, 0.01317963283509016, 0.0054145641624927521, 0.023368790745735168, 0.015196421183645725, 0.0052670692093670368, 0.014588696882128716, 0.022015321999788284, 0.009021327830851078, 0.0034637991338968277, 0.0012224968522787094, 0.0056493906304240227, 0.010791722685098648, 0.0094489771872758865, 0.011489629745483398, 0.0053392518311738968, 0.010961247608065605, 0.0086824176833033562, 0.0038211438804864883, 0.0067803612910211086, 0.0093722520396113396, 0.0029480939265340567, 0.0050613661296665668, 0.0047533581964671612, 0.0069016087800264359, 0.016458258032798767, 0.0062927124090492725, 0.0075798728503286839, 0.015568469651043415, 0.0073956656269729137, 0.0086876573041081429, 0.003125607967376709, 0.016533663496375084, 0.0091484319418668747, 0.0089315278455615044, 0.0048306155949831009, } };
const TfArray<48, int> quant8_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant8 = { (TfLiteFloatArray*)&quant8_scale, (TfLiteIntArray*)&quant8_zero, 0 };
const ALIGN(16) int32_t tensor_data9[48] = { 12477, 5020, 11286, 3997, 6173, 6494, -5268, 4802, 3567, -3401, -3426, 6478, -4132, -5823, 12132, 1695, -2222, 2362, -2354, 3412, -119, 6198, 3844, -3172, -840, -5877, 3238, -3983, 4460, 8600, 687, 616, 8568, 13118, 8647, 5195, 6167, -5485, 603, 5354, -813, -5084, 4662, 1241, -355, -7077, -13307, 3286, };
const TfArray<1, int> tensor_dimension9 = { 1, { 48 } };
const TfArray<48, float> quant9_scale = { 48, { 0.00036686027306132019, 0.00047587751760147512, 9.1991489171050489e-05, 0.00062360690208151937, 0.00027371078613214195, 0.00022713113867212087, 0.0014083526330068707, 0.00086555496091023088, 0.00099930621217936277, 0.00047742773313075304, 9.4489805633202195e-05, 0.00038227089680731297, 0.00036453260690905154, 0.00089071382535621524, 0.00036593031836673617, 0.001579323667101562, 0.0010270136408507824, 0.00035596222733147442, 0.00098594208247959614, 0.0014878526562824845, 0.00060968479374423623, 0.00023409255663864315, 8.2619517343118787e} };
const TfArray<48, int> quant9_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant9 = { (TfLiteFloatArray*)&quant9_scale, (TfLiteIntArray*)&quant9_zero, 0 };
const ALIGN(16) int8_t tensor_data10[1*3*3*48] = { 
  /* [0][0][][] */ -12,-85,-96,82,-87,-2,-89,-83,48,75,99,-34,-3,12,-70,-69,78,-94,29,-45,-3,-94,-49,-82,102,105,9,-122,15,-39,61,47,57,75,53,18,98,53,37,16,-112,-20,66,44,-60,-23,-6,-93, 88,-2,44,57,-127,34,-26,2,90,127,71,79,-19,-79,-114,-127,103,-44,86,-77,-91,127,127,38,127,115,42,-78,-94,-58,-107,119,113,127,86,119,-28,66,55,-77,-70,-98,44,-55,-69,96,-22,102, 107,-4,63,41,-83,4,-41,-16,10,73,12,-23,-88,-5,-36,-42,22,84,53,-29,-75,-15,-85,93,53,9,14,-33,7,-36,31,18,60,77,4,74,-1,15,31,-12,-60,-8,28,16,-19,10,-1,1, 
  /* [0][1][][] */ 44,-127,123,78,74,-74,-127,-127,118,60,127,-44,-2,4,-92,-91,104,127,58,-126,-39,123,25,-127,115,122,118,-127,2,-117,-70,65,93,-5,117,54,32,82,53,5,-10,-31,89,98,-101,40,-74,115, 127,-1,3,127,101,-127,-70,-1,127,95,76,78,-38,-127,-127,-126,127,58,127,-127,-127,-111,-127,55,94,127,127,-87,-127,-127,127,127,127,2,127,127,-15,127,127,-127,24,-127,122,-85,-113,127,-73,-127, 102,-7,-127,67,69,-65,-49,-22,27,51,-27,-4,-127,-9,-14,-18,24,-105,79,-38,-93,18,86,83,40,33,3,-58,-8,-62,-33,17,52,-19,27,83,11,25,55,-8,-30,-11,29,-3,-57,48,-8,18, 
  /* [0][2][][] */ 56,-87,12,9,-9,56,-81,-79,51,23,34,62,-3,19,-33,-51,12,-43,47,-76,-20,10,25,-83,41,54,87,-26,14,-98,19,10,62,-90,65,19,-127,12,3,1,17,-15,94,-127,-103,-10,-81,-6, 42,14,12,46,-1,81,-21,-11,26,67,-28,-127,-4,-61,-59,-72,20,-16,59,-107,-34,-3,-17,21,5,59,82,-16,-109,-89,-26,39,74,-99,53,33,14,51,60,-57,127,-57,127,104,-127,84,-127,22, -22,-12,-4,31,-28,28,-42,-10,1,39,-84,57,-53,-11,-14,-16,-17,27,48,-22,-41,32,27,37,0,23,28,10,4,-40,19,-13,6,-64,18,32,21,-10,34,5,45,-1,21,-8,-39,18,-36,3, 
};
const TfArray<4, int> tensor_dimension10 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant10_scale = { 48, { 0.0037090559490025043, 0.0055068214423954487, 0.021719412878155708, 0.0025967743713408709, 0.028713127598166466, 0.02648518793284893, 0.0060365684330463409, 0.0058766375295817852, 0.0033678037580102682, 0.0079733524471521378, 0.023249832913279533, 0.010180141776800156, 0.0084392661228775978, 0.0074092666618525982, 0.0029887589626014233, 0.002429155632853508, 0.0052698529325425625, 0.016562169417738914, 0.0024809304159134626, 0.0035698511637747288, 0.0024387061130255461, 0.036845926195383072, 0.043066147714853287, 0.00820159912109375, 0.0027367784641683102, 0.0047008502297103405, 0.0038696448318660259, 0.0053130206651985645, 0.0065281274728477001, 0.0044431369751691818, 0.023360511288046837, 0.014783674851059914, 0.0039510605856776237, 0.0098105436190962791, 0.0028395403642207384, 0.0031082320492714643, 0.012547997757792473, 0.010903866030275822, 0.0039025919977575541, 0.007377259898930788, 0.0042985663749277592, 0.0085209468379616737, 0.0037552712019532919, 0.01489680353552103, 0.0039326422847807407, 0.010409783571958542, 0.0048009990714490414, 0.031226132065057755, } };
const TfArray<48, int> quant10_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant10 = { (TfLiteFloatArray*)&quant10_scale, (TfLiteIntArray*)&quant10_zero, 3 };
const ALIGN(16) int32_t tensor_data11[48] = { 173, 7394, -1489, 3137, 3951, 3095, 8242, 8348, -1531, -8045, 863, -2131, 7146, 3595, 22324, 22267, 1426, -483, 571, 8805, 17877, -2955, -273, -611, 4583, 54, 3384, 15604, 7611, 10847, -427, 1528, -2164, -1222, 2376, 736, -186, -121, 257, 4112, 3315, 5435, -7213, 138, 5935, -420, 9385, -937, };
const TfArray<1, int> tensor_dimension11 = { 1, { 48 } };
const TfArray<48, float> quant11_scale = { 48, { 8.7271902884822339e-05, 0.00012957227590959519, 0.00051104504382237792, 6.1100574384909123e-05, 0.00067560299066826701, 0.0006231808802112937, 0.00014203690807335079, 0.0001382738264510408, 7.9242439824156463e-05, 0.00018760829698294401, 0.00054705492220818996, 0.00023953274649102241, 0.00019857096776831895, 0.00017433568427804857, 7.0323738327715546e-05, 5.7156605180352926e-05, 0.00012399653496686369, 0.00038969810702838004, 5.8374833315610886e-05, 8.3996499597560614e-05, 5.7381323131266981e-05, 0.00086696300422772765, 0.001013321103528142, 0.00019297881226520985, 6.4394786022603512e-05, 0.00011060824181186035, 9.1050467744935304e-05, 0.0001250122586498037, 0.00015360300312750041, 0.00010454440052853897, 0.00054965907474979758, 0.00034785119350999594, 9.2966132797300816e-05, 0.00023083631822373718, 6.681271770503372e-05, 7.313487003557384e-05, 0.0002952470094896853, 0.00025656155776232481, 9.1825699200853705e-05, 0.00017358259356115013, 0.00010114273754879832, 0.00020049286831635982, 8.8359323854092509e-05, 0.0003505130298435688, 9.2532762209884822e-05, 0.00024493609089404345, 0.0001129646843764931, 0.00073473254451528192, } };
const TfArray<48, int> quant11_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant11 = { (TfLiteFloatArray*)&quant11_scale, (TfLiteIntArray*)&quant11_zero, 0 };
const ALIGN(16) int8_t tensor_data12[8*1*1*48] = { 
  /* [0][0][][] */ 45,108,-34,64,-1,-11,-28,14,65,-55,8,-30,18,6,-27,-52,-1,-25,30,13,-52,-29,-33,12,18,18,25,-7,23,17,-30,21,-63,12,109,-127,-27,27,-12,110,-28,14,13,-11,-17,41,27,-37, 
  /* [1][0][][] */ 3,-40,43,52,-18,-10,-27,-16,45,-52,93,51,24,2,-57,-90,127,42,29,4,-84,36,43,-11,-44,-90,-38,-43,-3,-60,57,-41,-8,-18,-30,18,7,-26,95,-58,-5,34,-54,39,71,75,19,52, 
  /* [2][0][][] */ 59,-29,-2,-20,91,97,46,80,-28,8,4,-23,6,40,57,30,-14,-31,60,-52,-41,-43,-35,52,-84,-84,94,18,52,-46,-51,28,-127,79,93,21,-13,12,1,11,36,69,9,-53,-11,27,33,-42, 
  /* [3][0][][] */ 74,-37,26,-20,127,119,25,39,-29,-34,36,45,-118,31,69,15,2,15,66,-117,-88,13,31,91,5,-25,63,20,65,-47,-7,-27,-110,63,-55,-122,31,-34,59,-45,61,-91,-110,-35,-65,39,-9,63, 
  /* [4][0][][] */ 29,35,-21,-40,-14,-4,-16,-21,3,-14,-13,-12,-34,-24,50,45,-42,-11,-35,36,19,-9,-12,11,-54,-40,-5,56,-6,7,-15,25,-29,-10,28,-127,-5,24,11,55,8,-9,-6,-21,38,1,89,-23, 
  /* [5][0][][] */ 65,51,-95,56,1,5,-3,21,-79,-58,-52,-14,29,21,46,27,38,-60,35,127,-66,-49,-52,46,26,-25,-36,61,26,26,-48,8,-6,9,-63,1,-3,8,-23,67,10,73,-9,-39,121,21,14,-59, 
  /* [6][0][][] */ -36,-65,12,-42,-39,-42,-77,-67,-27,-56,-108,40,-50,-41,99,87,-127,3,21,-24,20,61,71,13,-14,-5,-64,79,-86,-30,36,74,7,-58,75,35,18,47,-16,-84,-15,-60,-36,14,-47,-28,-16,69, 
  /* [7][0][][] */ 74,13,-20,36,17,6,10,4,89,-18,-11,-17,56,8,-5,-26,-60,-5,-38,-5,6,-22,-22,-22,62,-127,22,-8,1,88,-26,6,-59,30,-57,-49,-13,24,19,20,25,67,-42,-20,-50,17,51,-21, 
};
const TfArray<4, int> tensor_dimension12 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant12_scale = { 8, { 0.0063302405178546906, 0.0037789475172758102, 0.0040552420541644096, 0.0024249914567917585, 0.00621452322229743, 0.0053260498680174351, 0.0048681106418371201, 0.0048853135667741299, } };
const TfArray<8, int> quant12_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant12 = { (TfLiteFloatArray*)&quant12_scale, (TfLiteIntArray*)&quant12_zero, 0 };
const ALIGN(16) int32_t tensor_data13[8] = { -11209, -603, -15312, -297, 2798, -1864, 10677, 2027, };
const TfArray<1, int> tensor_dimension13 = { 1, { 8 } };
const TfArray<8, float> quant13_scale = { 8, { 0.0001489468413637951, 8.8916414824780077e-05, 9.5417461125180125e-05, 5.7058623497141525e-05, 0.00014622407616116107, 0.0001253188238479197, 0.00011454378545749933, 0.00011494855425553396, } };
const TfArray<8, int> quant13_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant13 = { (TfLiteFloatArray*)&quant13_scale, (TfLiteIntArray*)&quant13_zero, 0 };
const ALIGN(16) int8_t tensor_data14[48*1*1*8] = { 
  /* [0][0][][] */ -23,17,2,-127,-98,5,44,110, 
  /* [1][0][][] */ 107,3,-9,11,-77,39,127,14, 
  /* [2][0][][] */ -13,115,-29,-26,-27,81,-50,-127, 
  /* [3][0][][] */ 85,-84,-98,94,-127,-34,-27,-35, 
  /* [4][0][][] */ 36,-55,39,-29,-127,2,43,25, 
  /* [5][0][][] */ -14,53,-13,-101,-127,0,-41,10, 
  /* [6][0][][] */ 37,-9,22,44,127,-20,8,-122, 
  /* [7][0][][] */ 9,23,10,127,21,-10,3,25, 
  /* [8][0][][] */ 20,32,9,-45,33,127,11,-20, 
  /* [9][0][][] */ 86,33,-16,-8,-52,-20,127,55, 
  /* [10][0][][] */ 2,61,-68,-31,-2,127,83,-60, 
  /* [11][0][][] */ -17,-50,-127,92,-47,18,-15,81, 
  /* [12][0][][] */ -112,-87,66,54,31,-127,-49,28, 
  /* [13][0][][] */ 41,38,32,51,-54,127,7,-35, 
  /* [14][0][][] */ 16,-93,3,-13,-43,-59,-127,85, 
  /* [15][0][][] */ -67,19,-25,1,85,-3,-127,-56, 
  /* [16][0][][] */ 62,80,-73,-127,51,113,81,47, 
  /* [17][0][][] */ -106,110,-127,20,-7,-15,6,-105, 
  /* [18][0][][] */ 30,-9,-80,127,-3,-39,-31,-50, 
  /* [19][0][][] */ 127,5,-5,21,-35,-6,105,64, 
  /* [20][0][][] */ 45,-80,-79,127,46,-27,-22,-91, 
  /* [21][0][][] */ 26,55,127,-105,36,-23,36,-108, 
  /* [22][0][][] */ -94,-25,-127,71,-39,29,25,105, 
  /* [23][0][][] */ 57,40,11,25,-127,83,72,-48, 
  /* [24][0][][] */ -4,-6,-127,80,-43,21,41,71, 
  /* [25][0][][] */ 44,-30,-75,127,54,8,-23,-28, 
  /* [26][0][][] */ -84,32,127,-107,-34,38,77,-13, 
  /* [27][0][][] */ -76,85,127,11,25,-17,74,28, 
  /* [28][0][][] */ -44,-100,41,-127,-11,7,8,-31, 
  /* [29][0][][] */ -97,-108,-42,72,10,-127,-45,78, 
  /* [30][0][][] */ -113,37,127,-17,42,19,71,21, 
  /* [31][0][][] */ -61,49,79,-127,-43,19,41,60, 
  /* [32][0][][] */ -84,114,86,-127,7,15,39,111, 
  /* [33][0][][] */ 9,105,-49,40,28,27,-127,-35, 
  /* [34][0][][] */ 91,10,127,-100,-107,-97,52,-68, 
  /* [35][0][][] */ 110,8,43,108,62,-77,22,-127, 
  /* [36][0][][] */ 29,69,127,-81,17,-13,57,-99, 
  /* [37][0][][] */ -47,-46,112,78,1,-127,85,-6, 
  /* [38][0][][] */ 93,14,100,64,-33,-65,127,23, 
  /* [39][0][][] */ 62,-114,-19,32,-127,2,94,93, 
  /* [40][0][][] */ -59,39,-126,98,-73,59,-91,127, 
  /* [41][0][][] */ -103,-29,-42,13,127,-2,-98,9, 
  /* [42][0][][] */ -84,67,-16,-29,127,38,-107,-68, 
  /* [43][0][][] */ 127,99,-26,112,-11,-105,60,64, 
  /* [44][0][][] */ -4,8,86,7,66,-127,30,-54, 
  /* [45][0][][] */ -11,-69,127,72,-27,-20,-111,19, 
  /* [46][0][][] */ 31,-103,-127,50,-90,50,5,-21, 
  /* [47][0][][] */ -126,-12,64,2,73,40,-127,-40, 
};
const TfArray<4, int> tensor_dimension14 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant14_scale = { 48, { 0.0031679507810622454, 0.006099421065300703, 0.00057142251171171665, 0.0044878730550408363, 0.010412738658487797, 0.0022177102509886026, 0.00459658307954669, 0.0079309241846203804, 0.0046675894409418106, 0.0079934075474739075, 0.0026070165913552046, 0.00690889498218894, 0.0042556864209473133, 0.0036961042787879705, 0.0043442752212285995, 0.0056157344952225685, 0.0039675813168287277, 0.0031763266306370497, 0.0070086997002363205, 0.0035525343846529722, 0.0042926776222884655, 0.0070660370402038097, 0.0049319136887788773, 0.0020974292419850826, 0.00059831066755577922, 0.0034513261634856462, 0.003834491828456521, 0.0062912586145102978, 0.0076833027414977551, 0.0026345839723944664, 0.0023132092319428921, 0.0013347364729270339, 0.0016853346023708582, 0.0036453409120440483, 0.0026158965192735195, 0.0029799861367791891, 0.0067211966961622238, 0.0036490026395767927, 0.0021117553114891052, 0.0036677180323749781, 0.0036447970196604729, 0.0020654015243053436, 0.0018144565401598811, 0.0030343851540237665, 0.0023746497463434935, 0.0059972959570586681, 0.0041548018343746662, 0.005766154732555151, } };
const TfArray<48, int> quant14_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant14 = { (TfLiteFloatArray*)&quant14_scale, (TfLiteIntArray*)&quant14_zero, 0 };
const ALIGN(16) int32_t tensor_data15[48] = { 7379, 2611, 64927, -3284, -946, 13962, -1106, 2022, 3808, 16, 8714, 990, 3402, 6125, 3747, 4177, 3686, 5111, -962, 7330, 2463, 6, 1526, 12649, 77146, 7110, 5302, -1213, -277, 8859, 11776, 22567, 16164, 5908, 9335, -3068, 435, 3592, 11757, 6080, 1572, 13587, 18730, 7071, 11130, 3054, 5051, 929, };
const TfArray<1, int> tensor_dimension15 = { 1, { 48 } };
const TfArray<48, float> quant15_scale = { 48, { 0.00011256090510869399, 0.00021671938884537667, 2.0303294149925932e-05, 0.00015945924678817391, 0.00036997647839598358, 7.8797776950523257e-05, 0.00016332183440681547, 0.00028179478249512613, 0.00016584477270953357, 0.00028401488089002669, 9.2630274593830109e-05, 0.0002454809146001935, 0.00015120938769541681, 0.00013132680032867938, 0.00015435705427080393, 0.00019953346054535359, 0.00014097269740886986, 0.00011285850632702932, 0.00024902709992602468, 0.00012622559734154493, 0.00015252373123075813, 0.00025106436805799603, 0.00017523652059026062, 7.4524054070934653e-05, 2.125866012647748e-05, 0.00012262955715414137, 0.00013624386338051409, 0.00022353559324983507, 0.00027299651992507279, 9.3609771283809096e-05, 8.2190963439643383e-05, 4.7424709919141605e-05, 5.9881862398469821e-05, 0.00012952311953995377, 9.2945789219811559e-05, 0.00010588230361463502, 0.0002388117864029482, 0.0001296532282140106, 7.5033072789665312e-05, 0.00013031820708420128, 0.0001295037945965305, 7.3386072472203523e-05, 6.4469713834114373e-05, 0.00010781516903080046, 8.4374012658372521e-05, 0.0002130907669197768, 0.00014762484352104366, 0.00020487805886659771, } };
const TfArray<48, int> quant15_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant15 = { (TfLiteFloatArray*)&quant15_scale, (TfLiteIntArray*)&quant15_zero, 0 };
const ALIGN(16) int8_t tensor_data16[1*3*3*48] = { 
  /* [0][0][][] */ -8,-50,45,-38,127,-5,-19,-14,-41,42,-7,7,63,22,127,-39,11,-33,-21,-17,-39,-13,-47,19,-125,50,41,-60,4,24,-8,-4,-31,42,21,-10,73,69,26,-4,49,20,-20,-4,-113,-20,-34,-26, 4,-105,-63,-35,-57,-11,34,17,9,3,56,127,-21,77,-60,127,-13,-58,32,-64,-92,-127,-71,65,-127,-74,25,127,19,42,127,6,-127,-80,-42,25,127,-81,117,15,26,-5,-30,-14,-62,-24,65,8, 20,-28,-7,127,59,4,-90,7,-32,-44,-15,-25,41,-1,-38,-48,12,-2,-2,-22,-2,12,-30,13,-68,-53,-22,50,6,42,-74,-3,15,74,22,10,-8,112,-120,3,24,2,-15,21,-127,-6,-44,51, 
  /* [0][1][][] */ -127,-67,127,-16,-47,-36,64,21,10,98,15,25,66,27,103,27,37,-127,83,39,73,-6,67,-39,-9,-15,42,-57,39,62,31,55,37,-94,10,127,8,24,-46,-109,15,91,-22,-91,38,-91,-48,27, 126,-64,-70,-77,-11,-127,127,127,127,22,127,-41,-127,17,-34,-46,127,-66,127,127,127,97,127,-127,16,-15,118,-20,127,127,-124,127,32,-127,127,-109,-57,127,-97,127,-127,-127,127,-127,114,-127,127,-111, -5,-110,11,58,-25,-7,-68,17,-23,-127,-23,62,78,2,-44,42,20,-6,12,5,-2,-17,31,-19,-9,16,-127,109,-54,24,95,25,-13,-86,-10,-44,64,45,127,12,26,57,-48,2,76,-41,-40,127, 
  /* [0][2][][] */ -6,121,27,-43,54,9,-51,-17,-42,27,2,6,75,20,99,4,-8,-15,-19,-57,-20,22,6,15,-26,-11,38,0,-38,-84,-13,-3,-11,56,-12,30,-58,56,15,111,14,23,-4,-9,22,-18,-12,-31, -10,95,-48,21,21,-40,-10,29,18,25,30,-49,56,127,-65,-83,0,-30,81,-91,-47,100,-5,51,88,127,16,115,-59,-88,-14,-4,94,-110,-76,-4,-63,-51,-22,-120,32,-17,-57,59,55,6,29,11, 19,127,-16,34,29,9,-76,0,-36,-8,3,-10,69,-15,-60,-3,-9,-12,-21,-37,-7,18,-13,7,-62,35,-35,19,33,-54,28,7,7,23,5,-24,-42,89,19,4,-15,-1,0,-19,23,-22,5,37, 
};
const TfArray<4, int> tensor_dimension16 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant16_scale = { 48, { 0.010213436558842659, 0.0057836053892970085, 0.018363185226917267, 0.0068012624979019165, 0.0077651417814195156, 0.012337428517639637, 0.0090403566136956215, 0.0075659346766769886, 0.016821999102830887, 0.0062822154723107815, 0.013373185880482197, 0.0081427525728940964, 0.0050152433104813099, 0.0061924504116177559, 0.0064859846606850624, 0.016600700095295906, 0.010455106385052204, 0.0035372700076550245, 0.0057698208838701248, 0.011024411767721176, 0.011256936006247997, 0.011984413489699364, 0.0099402349442243576, 0.031796596944332123, 0.0078785456717014313, 0.012339583598077297, 0.0058088670484721661, 0.0049529885873198509, 0.014510313048958778, 0.0088760238140821457, 0.016738392412662506, 0.025689814239740372, 0.017646446824073792, 0.00409361207857728, 0.025167519226670265, 0.0088704722002148628, 0.008687920868396759, 0.0034413882531225681, 0.017039025202393532, 0.026776492595672607, 0.010181069374084473, 0.025475334376096725, 0.019230848178267479, 0.0071589979343116283, 0.0082041407003998756, 0.005716999527066946, 0.0091458214446902275, 0.0075791985727846622, } };
const TfArray<48, int> quant16_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant16 = { (TfLiteFloatArray*)&quant16_scale, (TfLiteIntArray*)&quant16_zero, 3 };
const ALIGN(16) int32_t tensor_data17[48] = { -505, 2231, -50, 194, 134, 10279, 418, -4127, -2769, -1833, -8363, -324, -4554, -5612, -1180, 181, -8472, 16131, -3677, 1078, -243, -1556, -1823, 818, 21398, -1956, -2916, -1735, -967, -3396, -1458, -9326, -278, 8016, -1756, 6464, -555, -5214, -966, -1338, -2671, -1785, 5469, 6834, -1703, 10665, -2207, -3756, };
const TfArray<1, int> tensor_dimension17 = { 1, { 48 } };
const TfArray<48, float> quant17_scale = { 48, { 0.0002356319164391607, 0.0001334322732873261, 0.00042365293484181166, 0.00015691040607634932, 0.00017914785712491721, 0.0002846340648829937, 0.00020856804621871561, 0.00017455198394600302, 0.00038809658144600689, 0.00014493559137918055, 0.00030852979398332536, 0.00018785962311085314, 0.00011570555943762884, 0.00014286463556345552, 0.00014963670400902629, 0.00038299104198813438, 0.00024120742455124855, 8.1607569882180542e-05, 0.00013311425573192537, 0.00025434175040572882, 0.00025970625574700534, 0.00027648973627947271, 0.00022932894353289157, 0.00073357217479497194, 0.00018176417506765574, 0.0002846837742254138, 0.00013401507749222219, 0.00011426929268054664, 0.00033476419048383832, 0.00020477676298469305, 0.00038616772508248687, 0.00059268396580591798, 0.00040711724432185292, 9.4442810222972184e-05, 0.00058063422329723835, 0.00020464869157876819, 0.00020043707627337426, 7.9395496868528426e-05, 0.00039310354623012245, 0.0006177544710226357, 0.00023488518490921706, 0.00058773573255166411, 0.00044367060763761401, 0.0001651636412134394, 0.00018927590281236917, 0.00013189562014304101, 0.00021100119920447469, 0.00017485799617134035, } };
const TfArray<48, int> quant17_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant17 = { (TfLiteFloatArray*)&quant17_scale, (TfLiteIntArray*)&quant17_zero, 0 };
const ALIGN(16) int8_t tensor_data18[8*1*1*48] = { 
  /* [0][0][][] */ 32,-57,85,68,31,-32,22,1,-12,53,-29,12,-42,-75,34,13,-107,57,-31,55,-50,61,0,-18,-13,-52,61,-28,-20,21,-30,96,-70,-6,-39,-78,-67,-40,-42,-22,-12,56,-127,8,43,26,24,54, 
  /* [1][0][][] */ -47,-37,75,-4,-32,26,-27,-32,55,-7,6,-35,-24,16,-3,26,-6,26,12,-3,-60,-27,-73,-34,34,-38,-20,-36,33,-73,-9,-127,0,-56,-61,-77,-36,-95,-21,32,39,-23,97,-116,-48,-23,-21,-11, 
  /* [2][0][][] */ -55,91,-18,36,11,10,23,-42,64,-37,58,65,87,8,23,-41,80,-3,11,28,-11,14,18,127,-115,-43,12,-13,1,86,-16,-68,-30,-2,3,-72,-11,7,-29,-23,79,-69,20,-6,14,-114,3,-1, 
  /* [3][0][][] */ 51,-12,-68,38,91,-76,3,-110,-27,2,-48,-84,-20,127,-9,16,-35,-19,-52,-54,23,84,-15,-42,93,34,49,-68,25,-91,52,-62,39,56,104,-66,-41,20,-25,43,25,85,-80,22,-12,28,10,41, 
  /* [4][0][][] */ -47,22,-30,58,82,-28,31,-33,-41,-2,-58,28,-49,-23,1,-73,16,60,-33,-30,-29,25,-59,-65,30,-3,16,-35,24,-34,-33,56,5,67,-57,-67,-54,-63,-38,-2,63,-47,127,17,10,85,-54,-50, 
  /* [5][0][][] */ 55,3,71,-14,-11,17,49,34,127,1,70,-2,76,53,21,-63,-13,32,32,-46,-56,-70,14,44,18,-9,20,38,-46,-32,26,-23,-27,47,-22,57,48,-5,-27,-42,-16,80,33,42,-24,-4,73,7, 
  /* [6][0][][] */ -11,-80,-37,22,39,-2,-7,4,-62,-30,103,56,106,73,-43,65,110,-127,-24,-11,-26,-44,-103,48,-99,58,-48,-3,-15,-50,63,-57,88,15,-88,-29,-58,11,47,-7,79,-68,-18,-84,-125,39,-56,39, 
  /* [7][0][][] */ -16,-35,-51,-25,14,99,5,-1,-17,-53,-127,-93,38,45,-56,-50,-40,15,94,28,-12,-80,42,-7,107,-28,-64,83,-34,-9,-22,-75,-46,65,68,106,84,-51,-25,-45,-18,-16,37,-20,6,-18,1,-53, 
};
const TfArray<4, int> tensor_dimension18 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant18_scale = { 8, { 0.0064244987443089485, 0.0052464781329035759, 0.0061219511553645134, 0.0077029461972415447, 0.0054890746250748634, 0.0057995724491775036, 0.0034033195115625858, 0.005786677822470665, } };
const TfArray<8, int> quant18_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant18 = { (TfLiteFloatArray*)&quant18_scale, (TfLiteIntArray*)&quant18_zero, 0 };
const ALIGN(16) int32_t tensor_data19[8] = { 12053, 13613, 4546, 3278, 1880, -12212, 10355, -5369, };
const TfArray<1, int> tensor_dimension19 = { 1, { 8 } };
const TfArray<8, float> quant19_scale = { 8, { 0.00015116468421183527, 0.00012344654533080757, 0.00014404591638594866, 0.00018124579219147563, 0.00012915469415020198, 0.00013646052684634924, 8.0078105384018272e-05, 0.00013615713396575302, } };
const TfArray<8, int> quant19_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant19 = { (TfLiteFloatArray*)&quant19_scale, (TfLiteIntArray*)&quant19_zero, 0 };
const ALIGN(16) int8_t tensor_data20[48*1*1*8] = { 
  /* [0][0][][] */ 63,28,-68,28,-38,56,-127,25, 
  /* [1][0][][] */ 11,-61,-105,0,-2,-23,127,-109, 
  /* [2][0][][] */ -127,-52,-76,-39,-28,52,-126,-7, 
  /* [3][0][][] */ -61,-26,14,-14,-7,-127,-112,-24, 
  /* [4][0][][] */ -49,-127,-44,21,58,25,-34,-41, 
  /* [5][0][][] */ 63,-43,78,60,-127,42,-90,-92, 
  /* [6][0][][] */ 44,-127,-66,-28,-10,68,-39,-90, 
  /* [7][0][][] */ -9,-83,-52,-47,68,-127,-1,28, 
  /* [8][0][][] */ 45,47,62,63,21,-51,-1,127, 
  /* [9][0][][] */ -27,-52,-55,5,46,-12,127,-7, 
  /* [10][0][][] */ -21,8,-126,28,19,34,120,-127, 
  /* [11][0][][] */ 7,-31,-40,-1,-127,26,10,58, 
  /* [12][0][][] */ 100,62,-16,53,-76,127,82,-24, 
  /* [13][0][][] */ -54,-10,24,-24,37,-127,0,74, 
  /* [14][0][][] */ -109,-42,4,24,10,56,-127,-104, 
  /* [15][0][][] */ 67,75,55,12,-127,45,117,-70, 
  /* [16][0][][] */ 8,-58,17,52,-6,-54,10,-127, 
  /* [17][0][][] */ -74,127,15,0,-65,-40,-86,-78, 
  /* [18][0][][] */ 78,127,-109,-102,92,100,-103,-83, 
  /* [19][0][][] */ -33,69,-3,6,-127,11,-52,-87, 
  /* [20][0][][] */ -127,-6,15,5,26,12,106,56, 
  /* [21][0][][] */ -30,0,51,24,-89,-114,-127,31, 
  /* [22][0][][] */ 2,-41,-37,-1,-127,-4,8,55, 
  /* [23][0][][] */ 60,-2,-28,-3,127,73,-91,86, 
  /* [24][0][][] */ 127,31,-49,35,-76,16,21,-8, 
  /* [25][0][][] */ 34,-47,51,92,-32,-127,16,110, 
  /* [26][0][][] */ 29,127,16,52,75,-16,24,-15, 
  /* [27][0][][] */ -110,127,54,-9,123,-54,-13,99, 
  /* [28][0][][] */ -70,-75,-66,-19,83,-127,11,-19, 
  /* [29][0][][] */ -61,-25,33,60,127,-87,-76,67, 
  /* [30][0][][] */ 127,40,-98,-86,-57,-93,-57,-70, 
  /* [31][0][][] */ 29,1,48,67,-127,10,33,-4, 
  /* [32][0][][] */ 127,4,58,39,-22,-71,82,50, 
  /* [33][0][][] */ 116,32,-36,10,-127,-62,26,51, 
  /* [34][0][][] */ 42,4,-24,28,-33,127,9,-71, 
  /* [35][0][][] */ 127,36,-11,-36,63,-123,44,125, 
  /* [36][0][][] */ -45,-50,75,-98,-28,-14,78,-127, 
  /* [37][0][][] */ 81,-60,56,44,107,-9,42,-127, 
  /* [38][0][][] */ 68,127,3,-28,-20,16,19,80, 
  /* [39][0][][] */ 20,13,-79,71,-22,-70,-88,127, 
  /* [40][0][][] */ -23,-37,1,-44,28,-127,25,42, 
  /* [41][0][][] */ -35,50,-127,-61,91,125,66,-107, 
  /* [42][0][][] */ 42,-49,-49,30,83,127,49,51, 
  /* [43][0][][] */ 5,40,-16,27,-127,-68,56,-60, 
  /* [44][0][][] */ -124,-45,-22,-23,71,61,-127,-76, 
  /* [45][0][][] */ -76,67,-77,32,44,-5,-62,127, 
  /* [46][0][][] */ -6,44,127,-10,-60,-32,-24,37, 
  /* [47][0][][] */ -127,-105,-35,-43,93,95,-24,95, 
};
const TfArray<4, int> tensor_dimension20 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant20_scale = { 48, { 0.0028114335145801306, 0.0011418506037443876, 0.0015808012103661895, 0.0032912613824009895, 0.0036291445139795542, 0.00091942789731547236, 0.0018678755732253194, 0.0029534345958381891, 0.00042254722211509943, 0.0030170618556439877, 0.0016117114573717117, 0.0034181436058133841, 0.0018299398943781853, 0.0025290793273597956, 0.0033202453050762415, 0.0018166961381211877, 0.002542140195146203, 0.0010883706854656339, 0.0016210502944886684, 0.0029998179525136948, 0.0038526267744600773, 0.0025262413546442986, 0.0037742203567177057, 0.0022621292155236006, 0.003781463485211134, 0.0021136789582669735, 0.002861945191398263, 0.0018175641307607293, 0.0028917784802615643, 0.0016767394263297319, 0.0013373933034017682, 0.0022370927035808563, 0.0030374606139957905, 0.0031848463695496321, 0.002593952463939786, 0.0018294051988050342, 0.0020564363803714514, 0.0012148763053119183, 0.0030159868765622377, 0.002688701031729579, 0.0011299658799543977, 0.0012060388689860702, 0.0029354221187531948, 0.0027650822885334492, 0.0023768127430230379, 0.0020375009626150131, 0.00057689443929120898, 0.0017560998676344752, } };
const TfArray<48, int> quant20_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant20 = { (TfLiteFloatArray*)&quant20_scale, (TfLiteIntArray*)&quant20_zero, 0 };
const ALIGN(16) int32_t tensor_data21[48] = { -2216, 10241, 6816, -1031, 280, 12863, 5828, 1365, 34351, 2449, -3583, 1801, 4840, 2609, -443, 1920, -2046, 11248, -3877, -1374, 1370, 1414, 262, -864, 258, 3444, -2065, -2485, -1114, -3600, 10606, 3996, 660, 1477, 589, 3112, 2185, 8984, 1961, 597, 11919, -3133, 1246, 1889, -3032, -2587, 25422, 4229, };
const TfArray<1, int> tensor_dimension21 = { 1, { 48 } };
const TfArray<48, float> quant21_scale = { 48, { 0.0002175914851250127, 8.8373766629956663e-05, 0.00012234643509145826, 0.0002547278709243983, 0.00028087839018553495, 7.1159316576085985e-05, 0.00014456461940426379, 0.00022858168813399971, 3.2703130273148417e-05, 0.00023350612900685519, 0.00012473874085117131, 0.00026454793987795711, 0.00014162858133204281, 0.00019573862664401531, 0.00025697107776068151, 0.00014060357352718711, 0.00019674947543535382, 8.4234678070060909e-05, 0.00012546151992864907, 0.00023217152920551598, 0.00029817485483363271, 0.00019551898003555834, 0.00029210656066425145, 0.00017507796292193234, 0.00029266715864650905, 0.00016358862922061235, 0.00022150084259919822, 0.00014067075971979648, 0.00022380979498848319, 0.00012977159349247813, 0.00010350783122703433, 0.00017314025899395347, 0.00023508489539381117, 0.00024649183615110815, 0.00020075948850717396, 0.00014158719568513334, 0.00015915832773316652, 9.4025606813374907e-05, 0.00023342293570749462, 0.00020809257694054395, 8.7453947344329208e-05, 9.3341630417853594e-05, 0.00022718760010320693, 0.00021400411787908524, 0.00018395391816738993, 0.00015769280435051769, 4.4648866605712101e-05, 0.0001359137095278129, } };
const TfArray<48, int> quant21_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant21 = { (TfLiteFloatArray*)&quant21_scale, (TfLiteIntArray*)&quant21_zero, 0 };
const ALIGN(16) int8_t tensor_data22[1*3*3*48] = { 
  /* [0][0][][] */ 68,-36,-33,46,111,25,-61,-84,-5,44,100,-69,-77,61,109,31,86,-90,70,98,-100,-63,79,127,-48,-38,74,72,70,59,-24,67,77,-55,-95,-83,106,-65,81,30,-64,65,53,-58,118,127,48,-71, 109,-44,-79,101,112,41,-74,-109,12,71,81,-68,-126,109,121,90,49,-104,50,65,-97,-126,69,114,-33,-89,105,103,127,127,-61,82,54,-66,-127,-88,96,-82,78,39,-122,80,64,-80,69,101,52,-70, 40,-16,-51,41,16,9,-4,-47,61,13,26,-31,-117,47,17,7,-5,2,21,11,-31,-53,29,80,5,-28,12,21,38,51,-10,20,29,-34,-33,-104,58,-3,-3,38,-39,46,34,-29,58,57,5,-43, 
  /* [0][1][][] */ 71,-84,-72,64,127,66,-87,-89,53,112,127,-95,-78,99,127,54,110,-112,60,127,-118,-127,113,110,-94,-75,94,71,44,77,-65,121,97,-127,-96,-127,112,-106,115,91,-97,106,74,-126,127,98,19,-98, 66,-127,-127,127,125,127,-127,-127,107,127,114,-127,-127,127,93,127,127,-127,38,83,-127,-109,127,76,-127,-127,127,127,101,96,-127,127,127,-108,-99,-74,127,-127,127,127,-127,76,127,-127,102,88,32,-127, -15,-77,-90,84,21,39,-38,-28,93,62,57,-44,-107,50,20,35,47,-15,41,23,-36,-93,70,50,-66,-34,17,44,40,-16,-37,33,60,-100,-66,-68,38,-26,13,34,-27,29,42,-87,23,-16,11,-66, 
  /* [0][2][][] */ -29,-49,-53,34,30,46,-26,6,-127,62,55,-72,-77,14,32,50,78,-9,-88,48,-17,-44,63,36,-71,-37,30,23,3,-25,-38,52,72,-92,-9,-89,60,-45,43,83,-38,105,45,-92,60,24,-106,-8, -127,-81,-99,66,40,78,-54,5,-103,70,88,-69,-99,42,10,82,93,-28,-127,36,-26,-46,56,19,-77,-12,63,72,17,-19,-76,57,67,-114,7,-60,76,-50,48,109,-19,127,93,-123,63,-28,-127,-35, -74,-35,-52,38,7,23,8,45,-102,43,54,-19,-41,23,-15,50,20,12,-77,14,-28,-7,46,12,-53,-1,6,17,-20,-27,-25,23,25,-35,0,-31,40,5,-18,42,-3,17,62,-52,14,-4,-60,-21, 
};
const TfArray<4, int> tensor_dimension22 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant22_scale = { 48, { 0.0097565194591879845, 0.0045323609374463558, 0.0045169154182076454, 0.0042659384198486805, 0.0028067256789654493, 0.0051105567254126072, 0.0057595917023718357, 0.003922546748071909, 0.0075513478368520737, 0.0025762862060219049, 0.0049743256531655788, 0.0044043222442269325, 0.0031177536584436893, 0.0085554430261254311, 0.00445594172924757, 0.0038140916731208563, 0.0038281034212559462, 0.0068970108404755592, 0.018475882709026337, 0.0040111341513693333, 0.0026692766696214676, 0.0044928211718797684, 0.003202156163752079, 0.0058568865060806274, 0.00443301722407341, 0.0042979884892702103, 0.0066505451686680317, 0.0052311127074062824, 0.0069721932522952557, 0.010885899886488914, 0.0063468622975051403, 0.00342894671484828, 0.0031058718450367451, 0.0056207682937383652, 0.0046330587938427925, 0.0044657294638454914, 0.0032555423676967621, 0.0034699847456067801, 0.0033503319136798382, 0.0038805869407951832, 0.006395815871655941, 0.0075609567575156689, 0.0023299823515117168, 0.0032062495592981577, 0.0069972183555364609, 0.004912249743938446, 0.0094133196398615837, 0.0048261620104312897, } };
const TfArray<48, int> quant22_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant22 = { (TfLiteFloatArray*)&quant22_scale, (TfLiteIntArray*)&quant22_zero, 3 };
const ALIGN(16) int32_t tensor_data23[48] = { -690, 29621, 32502, -2358, -2506, -14945, 19875, 17764, -13111, -1164, -2115, 18553, 29039, -18260, -9793, -3532, -1435, 30417, -1128, -1453, 48488, 13734, -13199, -7339, 16770, 16448, -3164, -1236, -4023, -182, 29094, -2820, -6772, 15300, 13940, 19320, -8151, 49310, -790, -1031, 30744, -26, -1715, 22084, 187, -1322, -2844, 12839, };
const TfArray<1, int> tensor_dimension23 = { 1, { 48 } };
const TfArray<48, float> quant23_scale = { 48, { 0.00019270507618784904, 8.9520552137400955e-05, 8.9215478510595858e-05, 8.4258324932307005e-05, 5.5436808906961232e-05, 0.00010094073513755575, 0.00011376009206287563, 7.7475851867347956e-05, 0.00014914981147740036, 5.0885300879599527e-05, 9.8249976872466505e-05, 8.6991603893693537e-05, 6.1580052715726197e-05, 0.00016898212197702378, 8.8011162006296217e-05, 7.5333715358283371e-05, 7.5610463682096452e-05, 0.00013622573169413954, 0.00036492486833594739, 7.92255814303644e-05, 5.2721996325999498e-05, 8.8739579950924963e-05, 6.3247120124287903e-05, 0.00011568180343601853, 8.7558371888007969e-05, 8.489136234857142e-05, 0.00013135769404470921, 0.00010332188685424626, 0.00013771069643553346, 0.00021501193987205625, 0.00012535952555481344, 6.7726556153502315e-05, 6.134536670288071e-05, 0.00011101813288405538, 9.1509471531026065e-05, 8.8204484200105071e-05, 6.4301573729608208e-05, 6.8537112383637577e-05, 6.6173801315017045e-05, 7.6647091191262007e-05, 0.00012632642756216228, 0.00014933961210772395, 4.6020450099604204e-05, 6.332797056529671e-05, 0.0001382049813400954, 9.7023890702985227e-05, 0.0001859264011727646, 9.5323535788338631e-05, } };
const TfArray<48, int> quant23_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant23 = { (TfLiteFloatArray*)&quant23_scale, (TfLiteIntArray*)&quant23_zero, 0 };
const ALIGN(16) int8_t tensor_data24[8*1*1*48] = { 
  /* [0][0][][] */ -21,-31,35,-41,46,87,63,87,100,-55,-27,53,-29,-14,12,-18,43,28,5,-47,-29,20,-77,-47,28,-6,11,-64,-42,19,33,25,22,40,60,17,118,-53,-77,0,-58,-70,-34,-4,-76,-95,-127,49, 
  /* [1][0][][] */ -19,-6,-46,56,-6,17,-42,-20,-61,26,12,87,-30,8,-29,127,43,61,5,-39,-42,-18,-77,18,12,-9,-20,-84,44,-13,-58,-68,67,-37,-28,-59,36,31,46,-51,-1,63,47,-44,-5,-41,-57,-20, 
  /* [2][0][][] */ 12,-66,-28,-12,-33,14,8,13,108,13,-6,-20,-22,-71,33,8,-8,-65,-20,-4,-94,44,2,26,10,44,-44,-29,-20,-29,32,-44,-106,25,-43,52,-71,65,-17,-15,127,-27,-8,39,17,35,-52,-36, 
  /* [3][0][][] */ -31,-105,88,55,17,-89,-11,-10,-127,113,53,-47,50,15,-18,26,50,28,-23,42,66,81,26,-56,15,80,56,31,-32,-70,14,17,-15,5,48,10,-1,-81,-33,31,-23,-9,23,-58,-76,10,-13,29, 
  /* [4][0][][] */ -3,57,-19,63,40,-6,8,2,-44,73,50,74,9,13,61,9,0,-101,0,-8,79,-13,-88,61,72,-19,25,27,53,32,-12,-57,-57,127,2,19,49,-17,23,30,-19,51,4,-18,6,-38,-23,11, 
  /* [5][0][][] */ -31,1,-27,-66,-125,26,119,22,19,60,-36,-31,-112,-12,61,-49,-87,39,-72,-101,5,111,-7,36,118,37,1,23,-25,-23,127,-68,-24,110,83,98,-37,60,87,36,-34,-45,-32,41,-58,53,35,49, 
  /* [6][0][][] */ -2,-24,-14,31,-50,-47,11,7,16,-13,44,5,-57,-26,41,55,13,-63,4,-57,76,-18,-5,-27,3,-1,12,38,44,3,14,127,46,-17,-15,29,7,-13,17,9,8,33,-26,-52,4,-24,-30,39, 
  /* [7][0][][] */ -33,-21,-48,-1,9,-23,0,12,39,4,18,-2,-11,12,2,2,32,-6,-1,-4,-66,10,11,-32,-3,-6,-58,-13,-16,-20,23,33,19,-9,25,15,-18,127,-16,-46,-42,0,-41,-37,25,61,-74,-18, 
};
const TfArray<4, int> tensor_dimension24 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant24_scale = { 8, { 0.0042900573462247849, 0.0042619029991328716, 0.0046169250272214413, 0.0050630695186555386, 0.0056219869293272495, 0.0035578988026827574, 0.0061235376633703709, 0.0082694897428154945, } };
const TfArray<8, int> quant24_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant24 = { (TfLiteFloatArray*)&quant24_scale, (TfLiteIntArray*)&quant24_zero, 0 };
const ALIGN(16) int32_t tensor_data25[8] = { 7235, 400, 13883, -6998, -13799, -14036, -8308, -680, };
const TfArray<1, int> tensor_dimension25 = { 1, { 8 } };
const TfArray<8, float> quant25_scale = { 8, { 9.3294096586760134e-05, 9.2681839305441827e-05, 0.00010040235065389425, 0.00011010446905856952, 0.00012225902173668146, 7.7372147643472999e-05, 0.0001331660314463079, 0.00017983316502068192, } };
const TfArray<8, int> quant25_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant25 = { (TfLiteFloatArray*)&quant25_scale, (TfLiteIntArray*)&quant25_zero, 0 };
const ALIGN(16) int8_t tensor_data26[48*1*1*8] = { 
  /* [0][0][][] */ -84,-127,-28,30,-22,-3,50,-54, 
  /* [1][0][][] */ -5,127,37,-87,-7,-81,-66,87, 
  /* [2][0][][] */ -127,-68,67,31,84,14,59,-36, 
  /* [3][0][][] */ 6,-29,-127,-51,41,-53,-42,48, 
  /* [4][0][][] */ -53,-103,127,-36,111,-92,100,53, 
  /* [5][0][][] */ -20,43,33,-75,60,21,-52,127, 
  /* [6][0][][] */ -127,75,42,58,-41,9,27,-121, 
  /* [7][0][][] */ 48,3,44,45,43,-127,8,85, 
  /* [8][0][][] */ 9,62,-25,-28,32,119,127,-63, 
  /* [9][0][][] */ 88,127,-4,-76,-88,-65,-59,103, 
  /* [10][0][][] */ 15,-18,25,-11,-29,40,-127,-64, 
  /* [11][0][][] */ -77,4,-85,-78,127,16,23,49, 
  /* [12][0][][] */ 89,37,-35,1,127,77,22,-5, 
  /* [13][0][][] */ -127,-117,-5,51,-99,47,78,-4, 
  /* [14][0][][] */ -23,109,-82,113,-66,127,-22,47, 
  /* [15][0][][] */ 10,-59,-22,-57,127,75,-38,30, 
  /* [16][0][][] */ 79,-78,-11,47,23,-30,47,-127, 
  /* [17][0][][] */ -72,-85,-117,103,25,127,50,-99, 
  /* [18][0][][] */ 70,-11,127,-3,-57,-111,-70,-41, 
  /* [19][0][][] */ -53,127,21,14,110,-127,-82,-31, 
  /* [20][0][][] */ -94,-25,-127,-58,29,3,-11,7, 
  /* [21][0][][] */ -127,-36,55,35,-75,-76,86,-24, 
  /* [22][0][][] */ 61,-5,-127,-70,-45,-15,-8,54, 
  /* [23][0][][] */ -8,24,127,0,-79,42,3,-60, 
  /* [24][0][][] */ -79,78,83,94,127,92,-7,-51, 
  /* [25][0][][] */ -64,-127,-80,22,-55,40,22,3, 
  /* [26][0][][] */ 99,96,-127,-53,-85,-6,-55,24, 
  /* [27][0][][] */ 84,86,-81,25,-127,14,-46,-26, 
  /* [28][0][][] */ -24,60,36,-67,70,111,-98,-127, 
  /* [29][0][][] */ 61,-14,-16,-64,-127,-13,35,-62, 
  /* [30][0][][] */ -94,4,44,127,50,20,-43,-15, 
  /* [31][0][][] */ 28,-127,-29,-78,-117,86,-76,-125, 
  /* [32][0][][] */ -127,-3,17,-17,15,-25,-11,13, 
  /* [33][0][][] */ 64,-67,-127,-109,-18,11,-43,29, 
  /* [34][0][][] */ 69,108,127,3,-124,-57,65,-69, 
  /* [35][0][][] */ 99,11,6,0,-91,-35,-127,-68, 
  /* [36][0][][] */ 127,27,100,-54,-1,-4,59,94, 
  /* [37][0][][] */ 111,94,-7,-8,67,81,-127,48, 
  /* [38][0][][] */ -35,68,81,127,-33,37,42,-49, 
  /* [39][0][][] */ 37,36,127,-42,72,-52,-25,10, 
  /* [40][0][][] */ 77,29,20,9,-48,-127,21,-44, 
  /* [41][0][][] */ 35,-32,11,127,-30,47,20,62, 
  /* [42][0][][] */ -13,-127,65,-50,115,-34,120,21, 
  /* [43][0][][] */ -16,-37,-71,-41,84,48,-56,127, 
  /* [44][0][][] */ 93,-25,127,-18,-5,31,-53,9, 
  /* [45][0][][] */ -38,6,11,-40,-82,-127,-34,105, 
  /* [46][0][][] */ -46,56,51,23,1,-10,23,-127, 
  /* [47][0][][] */ 55,-9,12,127,-9,-97,92,51, 
};
const TfArray<4, int> tensor_dimension26 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant26_scale = { 48, { 0.0042881574481725693, 0.0022741006687283516, 0.0018574172863736749, 0.0040169628337025642, 0.0024230002891272306, 0.0029509793967008591, 0.0050613568164408207, 0.0015055921394377947, 0.0018770447932183743, 0.0016905753873288631, 0.0028041419573128223, 0.0033601033501327038, 0.004497181624174118, 0.0030540828593075275, 0.0035311554092913866, 0.0030680682975798845, 0.0042687384411692619, 0.001896948553621769, 0.0019962263759225607, 0.0038882170338183641, 0.0031124390661716461, 0.0018440673593431711, 0.0032164615113288164, 0.0034793515224009752, 0.0013001679908484221, 0.0023500940296798944, 0.0029132911004126072, 0.0014741151826456189, 0.0019926142413169146, 0.0027543737087398767, 0.0042500989511609077, 0.0016699074767529964, 0.0047641820274293423, 0.0023644964676350355, 0.0020070730242878199, 0.0031363079324364662, 0.00018324614211451262, 0.0014023191761225462, 0.0033278963528573513, 0.0013473785948008299, 0.0026928514707833529, 0.0047956272028386593, 0.0022528625559061766, 0.0035829388070851564, 0.0034397454001009464, 0.0033487016335129738, 0.0055102664045989513, 0.001922221970744431, } };
const TfArray<48, int> quant26_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant26 = { (TfLiteFloatArray*)&quant26_scale, (TfLiteIntArray*)&quant26_zero, 0 };
const ALIGN(16) int32_t tensor_data27[48] = { 1175, 8576, -8407, 3210, 4488, 4794, 1909, 13600, 12578, 10983, -3400, -895, 1291, 4625, 3157, 220, -163, 10118, 10724, 109, 4179, 10970, 3927, 4653, 15947, 8598, 1445, 13434, 2623, 6338, -2337, 10545, 1854, 7516, 7695, 5272, 205992, 14933, 4487, 17427, 3440, 806, 7188, 1329, 4500, 1974, 1596, 4716, };
const TfArray<1, int> tensor_dimension27 = { 1, { 48 } };
const TfArray<48, float> quant27_scale = { 48, { 0.00018420386186335236, 9.7687203378882259e-05, 7.9787983850110322e-05, 0.00017255431157536805, 0.00010408339585410431, 0.00012676347978413105, 0.00021741772070527077, 6.4674837631173432e-05, 8.0631107266526669e-05, 7.2621049184817821e-05, 0.0001204558793688193, 0.00014433798787649721, 0.00019318278646096587, 0.00013119244249537587, 0.00015168575919233263, 0.00013179320376366377, 0.00018336968787480146, 8.1486105045769364e-05, 8.5750725702382624e-05, 0.00016702385619282722, 0.00013369921362027526, 7.9214514698833227e-05, 0.00013816764112561941, 0.00014946045121178031, 5.5850552598712966e-05, 0.00010095160541823134, 0.00012514453555922955, 6.3322695496026427e-05, 8.5595558630302548e-05, 0.00011831801384687424, 0.00018256899784319103, 7.1733236836735159e-05, 0.00020465216948650777, 0.00010157028737012297, 8.6216656200122088e-05, 0.00013472454156726599, 7.8715966083109379e-06, 6.0238598962314427e-05, 0.00014295447908807546, 5.7878551160683855e-05, 0.00011567523324629292, 0.0002060029364656657, 9.6774892881512642e-05, 0.00015391019405797124, 0.0001477591140428558, 0.00014384819951374084, 0.00023670127848163247, 8.2571757957339287e-05, } };
const TfArray<48, int> quant27_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant27 = { (TfLiteFloatArray*)&quant27_scale, (TfLiteIntArray*)&quant27_zero, 0 };
const ALIGN(16) int8_t tensor_data28[1*3*3*48] = { 
  /* [0][0][][] */ -84,27,41,3,127,-8,19,13,63,26,86,-7,3,41,-77,12,72,-97,-5,48,-47,-6,-55,6,-8,1,28,-30,-15,127,49,-90,-25,100,127,-62,15,-90,-127,-26,24,-43,1,-71,12,-3,-122,11, -93,75,33,19,-33,-103,120,-11,127,7,56,127,35,127,-42,11,127,-105,11,127,-52,-44,109,-99,18,52,-73,40,-20,-105,106,-127,-127,-81,43,-9,-60,-68,-95,16,-36,-48,36,-127,31,-80,13,31, -39,14,-32,-5,43,-27,9,4,53,19,-7,-64,-49,13,-96,36,57,-97,-6,48,-14,-17,-76,7,35,2,29,-82,-39,34,-65,-55,-1,-6,106,-38,18,-44,-73,2,33,13,11,-60,-2,-40,-127,-36, 
  /* [0][1][][] */ -127,119,2,-57,-5,-72,18,2,58,11,84,41,99,111,-96,25,116,-121,24,85,-5,-92,-100,-23,-126,-7,-26,15,-3,-2,127,-20,-56,127,-101,-47,34,-99,25,61,-98,15,-81,61,-2,-127,4,-53, 4,127,127,127,-50,120,-127,127,125,-127,-86,53,127,72,127,-85,-19,-127,127,61,-127,127,127,1,127,127,65,127,127,-85,107,-21,-33,-96,-4,-127,127,127,99,52,-51,127,-26,96,127,50,-14,-127, -86,45,-33,-46,-59,-102,22,-10,-6,0,71,40,42,113,-116,127,113,-126,-3,125,48,-119,-88,-29,38,-11,-20,14,-19,-1,104,-12,-17,-45,-112,-49,34,-96,55,-127,-67,58,127,58,-15,-88,-33,100, 
  /* [0][2][][] */ -32,-30,10,-3,24,-14,38,5,87,30,103,19,25,5,-23,86,119,-29,-45,-39,-40,-9,-66,57,-7,-11,-7,-14,7,61,39,32,-61,47,-67,68,-50,-95,43,-32,82,-29,-1,-1,-17,-27,8,-35, -102,107,39,26,-99,-127,59,-67,39,22,127,-49,-69,18,-120,79,109,-15,-21,113,-106,-9,65,127,29,-123,127,11,13,-48,-65,-116,-27,-64,-61,-43,-79,-116,58,33,127,66,-31,50,-25,-66,-114,-26, -12,-50,-3,2,-13,-27,29,20,47,19,75,35,38,4,-68,106,81,-59,-63,15,-38,-18,-63,41,16,-10,-16,-59,-5,-13,9,30,-59,-7,-8,86,-42,-49,65,2,30,10,48,-8,-13,-83,6,23, 
};
const TfArray<4, int> tensor_dimension28 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant28_scale = { 48, { 0.0048150289803743362, 0.0050078523345291615, 0.023972611874341965, 0.010285405442118645, 0.0074012656696140766, 0.0091042360290884972, 0.0052297296933829784, 0.018972791731357574, 0.0050154794007539749, 0.022251542657613754, 0.0081392424181103706, 0.0096652591601014137, 0.0066719199530780315, 0.0043889004737138748, 0.00461152708157897, 0.004152574110776186, 0.0035645267926156521, 0.0034558605402708054, 0.016667820513248444, 0.0027750583831220865, 0.0058806706219911575, 0.01019649114459753, 0.0073418929241597652, 0.0071058101020753384, 0.0087948255240917206, 0.010151180438697338, 0.010093548335134983, 0.013199768960475922, 0.01353241503238678, 0.0099649876356124878, 0.0034935388248413801, 0.0060870721936225891, 0.0071100629866123199, 0.010127012617886066, 0.0062782848253846169, 0.0070217386819422245, 0.01967230811715126, 0.0038493850734084845, 0.0050138076767325401, 0.017122643068432808, 0.0079750446602702141, 0.0066719837486743927, 0.0077041229233145714, 0.0059788478538393974, 0.0080234678462147713, 0.0031723282299935818, 0.0053893891163170338, 0.0086782053112983704, } };
const TfArray<48, int> quant28_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant28 = { (TfLiteFloatArray*)&quant28_scale, (TfLiteIntArray*)&quant28_zero, 3 };
const ALIGN(16) int32_t tensor_data29[48] = { 14790, -17836, -2222, 2648, 523, 7056, 4717, -3327, -15542, 2738, -3736, -1785, -6689, -13983, 11623, -371, -10056, 34891, -4016, -14194, 14244, 3901, -774, -2600, -4939, -2429, -5199, -3117, -1244, 2829, 1681, 14853, 13974, 311, 1213, 10915, -798, 28292, -1207, 304, -3261, -8348, -3891, 2122, 2200, 22638, 14944, -1824, };
const TfArray<1, int> tensor_dimension29 = { 1, { 48 } };
const TfArray<48, float> quant29_scale = { 48, { 9.2260277597233653e-05, 9.5954950666055083e-05, 0.00045933679211884737, 0.00019707760657183826, 0.00014181490405462682, 0.00017444534751120955, 0.00010020632180385292, 0.00036353574250824749, 9.6101088274735957e-05, 0.00042635956197045743, 0.00015595520380884409, 0.00018519505101721734, 0.00012783998681697994, 8.4095277998130769e-05, 8.8361004600301385e-05, 7.9567049397155643e-05, 6.829953781561926e-05, 6.6217391577083617e-05, 0.00031937041785567999, 5.3172610932961106e-05, 0.00011267893569311127, 0.00019537392654456198, 0.00014067726442590356, 0.00013615369971375912, 0.00016851675172802061, 0.00019450573017820716, 0.00019340145809110254, 0.00025291944621130824, 0.00025929324328899384, 0.0001909381098812446, 6.6939341195393354e-05, 0.00011663377517834306, 0.00013623519043903798, 0.00019404265913181007, 0.00012029757635900751, 0.00013454281724989414, 0.00037693910417146981, 7.3757677455432713e-05, 9.6069059509318322e-05, 0.00032808521063998342, 0.00015280902152881026, 0.00012784120917785913, 0.00014761791680939496, 0.00011456009815447032, 0.00015373685164377093, 6.0784659581258893e-05, 0.00010326553456252441, 0.00016628220328129828, } };
const TfArray<48, int> quant29_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant29 = { (TfLiteFloatArray*)&quant29_scale, (TfLiteIntArray*)&quant29_zero, 0 };
const ALIGN(16) int8_t tensor_data30[8*1*1*48] = { 
  /* [0][0][][] */ 43,37,-77,45,3,27,-76,-34,10,-10,4,-35,-12,-6,34,-1,46,-24,39,-25,12,-34,31,-4,3,-12,-24,6,-9,7,-18,-7,51,24,20,7,127,47,20,-29,-5,-24,-5,-21,75,30,12,-43, 
  /* [1][0][][] */ 74,32,34,-9,38,99,-4,-41,44,73,-35,-75,114,-22,6,30,30,13,10,-88,127,-22,34,41,16,18,42,4,23,-57,59,66,72,105,-2,114,55,14,2,19,76,14,27,24,26,38,102,-63, 
  /* [2][0][][] */ 14,18,63,127,-57,5,-15,58,30,58,38,-59,-23,97,8,46,-93,-89,71,11,-14,70,-55,-82,-37,-31,16,-16,-107,8,5,-14,-21,-24,-67,-40,18,-5,-82,-21,-18,-42,-48,19,64,-55,-9,17, 
  /* [3][0][][] */ -22,57,-51,0,23,-63,1,54,105,-65,-32,27,5,-17,1,49,18,-3,-25,-24,-19,10,-70,27,-43,-20,38,-23,71,-23,33,-57,37,-16,-33,-45,-127,-20,-89,13,-35,-62,21,-15,-48,12,-5,-29, 
  /* [4][0][][] */ 61,-23,3,-27,-52,46,14,79,-127,-60,54,38,57,-50,-52,-50,66,81,69,-26,20,-76,-15,47,-10,14,-48,-98,-66,-66,79,48,72,4,115,74,71,62,75,30,31,49,-42,-23,59,71,91,-55, 
  /* [5][0][][] */ 13,81,31,71,45,32,-32,-82,-91,20,-25,-11,6,67,37,-72,82,101,-12,20,0,-53,-24,-57,-90,-79,-34,63,-10,35,-32,39,-17,-79,57,9,-33,127,-23,-92,0,-46,-13,-34,5,-28,-39,86, 
  /* [6][0][][] */ 105,70,30,127,-65,28,9,54,3,-85,47,89,62,-38,-23,-63,55,41,-66,32,74,-13,-28,-4,6,65,-39,-51,24,-53,54,72,-2,-53,4,103,111,-68,-6,21,-74,65,-114,68,55,82,114,-47, 
  /* [7][0][][] */ 24,6,127,48,-43,74,-91,5,-39,121,3,-2,63,54,3,-7,-70,-20,-73,0,-22,27,-9,-52,4,57,51,-25,12,10,17,-25,-89,-18,76,27,102,-12,39,-24,-28,-50,-24,-43,-4,-30,3,34, 
};
const TfArray<4, int> tensor_dimension30 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant30_scale = { 8, { 0.0058776829391717911, 0.0034114453010261059, 0.0022855214774608612, 0.0031447981018573046, 0.003442536573857069, 0.004144235048443079, 0.0021257493644952774, 0.0030005704611539841, } };
const TfArray<8, int> quant30_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant30 = { (TfLiteFloatArray*)&quant30_scale, (TfLiteIntArray*)&quant30_zero, 0 };
const ALIGN(16) int32_t tensor_data31[8] = { -12838, -37284, 1845, 9117, -19496, -428, -29623, -1643, };
const TfArray<1, int> tensor_dimension31 = { 1, { 8 } };
const TfArray<8, float> quant31_scale = { 8, { 0.00011873312178067863, 6.8913475843146443e-05, 4.6169061533873901e-05, 6.3527018937747926e-05, 6.9541536504402757e-05, 8.3716317021753639e-05, 4.2941555875586346e-05, 6.0613529058173299e-05, } };
const TfArray<8, int> quant31_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant31 = { (TfLiteFloatArray*)&quant31_scale, (TfLiteIntArray*)&quant31_zero, 0 };
const ALIGN(16) int8_t tensor_data32[48*1*1*8] = { 
  /* [0][0][][] */ -127,39,-9,-39,48,53,23,-31, 
  /* [1][0][][] */ -1,-59,-46,-15,-75,-127,16,11, 
  /* [2][0][][] */ -51,74,2,-47,-31,52,-81,127, 
  /* [3][0][][] */ 50,47,80,-1,-48,-127,40,-21, 
  /* [4][0][][] */ 14,57,-127,18,-116,122,39,63, 
  /* [5][0][][] */ -39,48,32,-25,-94,-127,-61,-15, 
  /* [6][0][][] */ -39,127,85,-47,-65,-6,9,-7, 
  /* [7][0][][] */ 3,1,26,54,5,-127,-10,52, 
  /* [8][0][][] */ 127,4,-66,122,-102,-74,-121,-2, 
  /* [9][0][][] */ 120,-28,-89,-70,-8,-49,-25,127, 
  /* [10][0][][] */ -73,27,1,127,14,81,45,-85, 
  /* [11][0][][] */ 30,24,74,-18,-9,114,127,99, 
  /* [12][0][][] */ -72,-86,-52,-108,127,-15,-25,30, 
  /* [13][0][][] */ -26,1,-25,31,26,-127,59,64, 
  /* [14][0][][] */ 65,84,115,49,82,-127,-121,-32, 
  /* [15][0][][] */ -37,83,127,60,-4,28,41,-61, 
  /* [16][0][][] */ -80,-12,26,-95,127,0,-23,-4, 
  /* [17][0][][] */ 56,-52,-64,-1,-15,127,-27,44, 
  /* [18][0][][] */ -54,127,87,-29,-102,39,121,-78, 
  /* [19][0][][] */ 30,122,94,127,-32,41,17,33, 
  /* [20][0][][] */ 16,4,64,-127,-46,13,59,2, 
  /* [21][0][][] */ -77,91,8,-127,111,43,121,30, 
  /* [22][0][][] */ 57,-39,-82,37,57,-23,-54,127, 
  /* [23][0][][] */ 54,-105,-127,-40,59,-17,-76,77, 
  /* [24][0][][] */ 32,-39,-84,3,-48,24,-103,127, 
  /* [25][0][][] */ -16,-20,56,35,127,-9,-115,-70, 
  /* [26][0][][] */ 9,91,127,-6,-42,-36,41,-77, 
  /* [27][0][][] */ -32,23,127,-76,15,24,79,-107, 
  /* [28][0][][] */ 34,-21,122,127,62,-33,38,108, 
  /* [29][0][][] */ 55,75,108,37,-51,34,-127,71, 
  /* [30][0][][] */ 45,7,-71,68,-127,-21,-44,61, 
  /* [31][0][][] */ -3,119,106,-100,-35,45,127,-113, 
  /* [32][0][][] */ 95,-19,-36,56,121,127,61,-37, 
  /* [33][0][][] */ 3,-43,-127,2,29,-12,-48,74, 
  /* [34][0][][] */ 12,-49,36,-127,0,68,-15,19, 
  /* [35][0][][] */ -5,39,75,-2,2,-127,11,-13, 
  /* [36][0][][] */ -3,15,-41,-127,-12,-1,18,-53, 
  /* [37][0][][] */ 71,-16,-25,-96,-75,127,-65,-69, 
  /* [38][0][][] */ 87,-49,-32,83,68,19,-28,127, 
  /* [39][0][][] */ 127,78,24,65,-2,84,-44,2, 
  /* [40][0][][] */ 46,-94,-127,11,-14,-13,-20,73, 
  /* [41][0][][] */ 9,-39,-127,-83,-15,-99,-65,-10, 
  /* [42][0][][] */ 28,96,101,127,-81,-46,26,29, 
  /* [43][0][][] */ 127,-59,-127,-115,-78,-37,-7,53, 
  /* [44][0][][] */ -15,56,119,-92,-82,-9,96,-127, 
  /* [45][0][][] */ 46,35,-127,58,-56,39,19,102, 
  /* [46][0][][] */ 32,-42,-50,-127,26,-29,-36,37, 
  /* [47][0][][] */ 110,-106,127,-73,73,-32,14,22, 
};
const TfArray<4, int> tensor_dimension32 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant32_scale = { 48, { 0.00017262808978557587, 0.0019677258096635342, 0.0032537537626922131, 0.0029775602743029594, 0.0021634662989526987, 0.0031964168883860111, 0.0038057209458202124, 0.0031261963304132223, 0.0014218941796571016, 0.0020471864845603704, 0.0012055459665134549, 0.0031922673806548119, 0.0011678071459755301, 0.0035797550808638334, 0.0023801925126463175, 0.0029297526925802231, 0.0017190440557897091, 0.0035534189082682133, 0.0017251253593713045, 0.0028461490292102098, 0.0027557665016502142, 0.0021544508635997772, 0.0037780958227813244, 0.0021386849693953991, 0.0036680034827440977, 0.0026910437736660242, 0.0033697511535137892, 0.00098234007600694895, 0.0033836488146334887, 0.0017340233316645026, 0.0024295351468026638, 0.0021122128237038851, 0.0034625369589775801, 0.0030443768482655287, 0.0026947937440127134, 0.0043123876675963402, 0.0028808014467358589, 0.0023356718011200428, 0.0044462508521974087, 0.0030417439993470907, 0.0016868324019014835, 0.0039256354793906212, 0.0008635107078589499, 0.0020167608745396137, 0.0042478595860302448, 0.0019907834939658642, 0.0025539260823279619, 0.0026237198617309332, } };
const TfArray<48, int> quant32_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant32 = { (TfLiteFloatArray*)&quant32_scale, (TfLiteIntArray*)&quant32_zero, 0 };
const ALIGN(16) int32_t tensor_data33[48] = { 154589, 9948, 2223, 1895, 7909, 3766, 4362, 4749, 8443, -7783, 20518, 2434, 16951, 2012, 5213, 3677, 8667, -732, 12162, 122, 5806, -221, 3463, 7891, 2324, -4977, 3379, 24585, 1045, 11025, 3317, 10407, 533, 6065, -244, -1609, 4910, 3578, 13, 2251, 13071, -1107, 25082, 4987, 889, 8983, 5312, -3231, };
const TfArray<1, int> tensor_dimension33 = { 1, { 48 } };
const TfArray<48, float> quant33_scale = { 48, { 7.4962590588256717e-06, 8.5447172750718892e-05, 0.00014129208284430206, 0.00012929856893606484, 9.3947077402845025e-05, 0.00013880226470064372, 0.00016526089166291058, 0.00013575298362411559, 6.1744802223984152e-05, 8.8897701061796397e-05, 5.2350027544889599e-05, 0.00013862206833437085, 5.0711245421553031e-05, 0.00015544846246484667, 0.00010335826664231718, 0.00012722254905384034, 7.464833470294252e-05, 0.00015430484199896455, 7.4912415584549308e-05, 0.00012359212269075215, 0.00011966731835855171, 9.3555587227456272e-05, 0.0001640612754272297, 9.2870963271707296e-05, 0.00015928059292491525, 0.00011685677600326017, 0.00014632918464485556, 4.265745883458294e-05, 0.00014693268167320639, 7.5298805313650519e-05, 0.0001055009342962876, 9.1721427452284843e-05, 0.00015035834803711623, 0.00013220003165770322, 0.00011701961193466559, 0.00018726254347711802, 0.00012509687803685665, 0.00010142498649656773, 0.00019307546608615667, 0.00013208569725975394, 7.3249568231403828e-05, 0.00017046809080056846, 3.7497375160455704e-05, 8.7576489022467285e-05, 0.00018446045578457415, 8.6448439105879515e-05, 0.00011090253246948123, 0.00011393328168196604, } };
const TfArray<48, int> quant33_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant33 = { (TfLiteFloatArray*)&quant33_scale, (TfLiteIntArray*)&quant33_zero, 0 };
const ALIGN(16) int8_t tensor_data34[1*3*3*48] = { 
  /* [0][0][][] */ 94,59,7,66,9,7,-22,32,31,-21,41,17,9,-79,-14,31,115,14,-82,-19,87,50,-23,-27,74,18,10,9,-92,35,-22,-57,116,5,117,14,-49,18,127,13,-75,90,-109,-59,40,-85,-24,-14, 123,127,-18,116,29,46,-47,-127,57,58,127,55,-34,-6,-7,-20,-40,127,-94,11,38,127,28,-34,29,-9,6,127,-127,71,-48,-127,20,-32,33,82,-100,127,122,18,-127,-60,71,-15,19,9,-127,112, 66,40,35,40,10,12,-25,46,32,-103,42,50,4,-84,-24,-38,111,-20,-41,-27,92,81,-30,46,43,121,3,-3,-32,51,-30,-37,127,16,127,8,-42,20,72,-11,-34,90,53,65,30,69,23,4, 
  /* [0][1][][] */ -11,-39,-127,81,28,40,83,-34,25,35,-35,127,127,1,-13,-97,-45,61,67,-19,-119,-15,40,-97,34,47,11,27,36,127,18,50,78,127,8,43,-85,-21,-40,60,69,16,57,-127,13,-104,-15,127, 70,-88,-3,-127,127,9,127,-119,-127,96,4,59,-104,127,127,-35,-127,90,20,127,28,-67,127,-5,-127,127,33,-71,-49,-1,-127,102,115,-98,0,106,127,82,3,127,97,-57,-33,-12,122,-62,-8,5, 0,-56,-78,33,-10,127,52,-15,29,24,-31,68,-6,-1,-30,-30,-90,98,127,-46,-127,26,-56,127,1,69,12,37,82,124,39,31,-7,-9,-55,-127,-62,-42,-20,11,62,83,-20,111,-18,98,-40,100, 
  /* [0][2][][] */ -27,-41,-3,11,-1,11,-10,21,39,14,9,38,7,-69,-39,28,107,17,9,5,-75,75,-1,-18,35,-19,-14,2,27,45,63,7,52,2,111,-21,-20,69,73,17,35,73,104,-47,-52,-127,9,6, -127,-14,-80,63,-114,13,-59,6,31,127,-69,55,-41,-12,-16,127,-77,90,-90,-24,-80,19,13,-41,-3,95,-127,-26,-73,101,70,24,38,-30,21,-3,-35,95,-31,76,-44,-127,-127,-50,-127,40,-118,106, -22,-39,28,9,13,6,-26,16,26,-5,-3,-14,-25,-73,-38,5,106,0,98,3,-73,38,1,18,26,25,-15,-7,-8,23,42,1,17,-3,94,2,-19,72,66,9,42,67,-66,37,-42,95,5,-43, 
};
const TfArray<4, int> tensor_dimension34 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant34_scale = { 48, { 0.0087656928226351738, 0.0071495617739856243, 0.0072711599059402943, 0.0051900856196880341, 0.0097313970327377319, 0.0071574975736439228, 0.0086515769362449646, 0.0067736520431935787, 0.01118868961930275, 0.02411474846303463, 0.012211582623422146, 0.0036442261189222336, 0.01276576891541481, 0.0043276208452880383, 0.0076294159516692162, 0.0068629775196313858, 0.0043254555203020573, 0.0051150703802704811, 0.0065862718038260937, 0.017395658418536186, 0.0040727793239057064, 0.0062950057908892632, 0.0094219157472252846, 0.0099881412461400032, 0.0069488431327044964, 0.0059297690168023109, 0.010885235853493214, 0.014691788703203201, 0.0060243606567382812, 0.0045390445739030838, 0.0075415177270770073, 0.0070249331183731556, 0.0044547189027070999, 0.013428252190351486, 0.0048473994247615337, 0.0067386971786618233, 0.0073658409528434277, 0.0038692736998200417, 0.0031091498676687479, 0.0052841571159660816, 0.011560948565602303, 0.0052181663922965527, 0.011030824854969978, 0.0071993367746472359, 0.0067602735944092274, 0.0042684436775743961, 0.01074935682117939, 0.009908607229590416, } };
const TfArray<48, int> quant34_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant34 = { (TfLiteFloatArray*)&quant34_scale, (TfLiteIntArray*)&quant34_zero, 3 };
const ALIGN(16) int32_t tensor_data35[48] = { -10093, 2570, 6867, 2362, -3339, -9151, -6332, 13226, 4149, -4410, -8771, -9737, 1941, 15986, 11600, 3500, 12912, -9906, 8015, -544, 22585, -3933, -3205, -211, 5272, -13918, 2100, -5623, 10901, -37440, -4079, -1384, -4471, -610, 717, -434, 13659, -4947, 1212, -14369, -4687, 9030, -1718, 2358, 3531, 1070, 9352, -3722, };
const TfArray<1, int> tensor_dimension35 = { 1, { 48 } };
const TfArray<48, float> quant35_scale = { 48, { 0.00013226244482211769, 0.00010787721839733422, 0.0001097119675250724, 7.8311371908057481e-05, 0.0001468336267862469, 0.00010799695883179083, 0.00013054058945272118, 0.00010220524563919753, 0.00016882219642866403, 0.00036385894054546952, 0.00018425626331008971, 5.4986445320537314e-05, 0.00019261818670202047, 6.5297943365294486e-05, 0.00011511756747495383, 0.00010355305130360648, 6.5265274315606803e-05, 7.7179494837764651e-05, 9.937793220160529e-05, 0.00026247696951031685, 6.1452730733435601e-05, 9.4983122835401446e-05, 0.00014216396084520966, 0.00015070755034685135, 0.00010484864469617605, 8.9472196123097092e-05, 0.00016424349450971931, 0.00022167921997606754, 9.0899455244652927e-05, 6.8488043325487524e-05, 0.00011379130592104048, 0.0001059967398759909, 6.721568206558004e-05, 0.00020261415920685977, 7.3140705353580415e-05, 0.0001016778260236606, 0.00011114057997474447, 5.8382105635246262e-05, 4.6912868128856644e-05, 7.9730787547305226e-05, 0.00017443907563574612, 7.8735072747804224e-05, 0.00016644022252876312, 0.00010862825729418546, 0.00010200338874710724, 6.440504512283951e-05, 0.00016219326062127948, 0.00014950748300179839, } };
const TfArray<48, int> quant35_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant35 = { (TfLiteFloatArray*)&quant35_scale, (TfLiteIntArray*)&quant35_zero, 0 };
const ALIGN(16) int8_t tensor_data36[8*1*1*48] = { 
  /* [0][0][][] */ 123,-28,28,-23,30,61,-2,33,127,-93,48,6,-48,56,6,-36,19,-33,-35,-22,23,-71,2,-23,-48,-38,-45,-47,-37,90,-25,25,21,-37,1,-32,75,-75,-44,1,18,-18,-76,-13,60,-41,67,-45, 
  /* [1][0][][] */ 45,4,-5,74,54,71,17,36,84,-93,-9,16,48,12,-49,-5,-34,-44,-82,-1,10,-72,44,81,-1,-68,-7,30,-42,67,-57,127,-28,49,-44,-19,-57,-15,-7,-16,-60,-30,-38,34,25,-20,21,-84, 
  /* [2][0][][] */ -22,-10,-60,18,-80,-39,-12,51,-90,-67,-63,-35,-44,59,-127,-13,50,-78,30,-49,118,82,-5,-4,40,84,23,-63,-41,12,47,10,-10,37,69,-55,91,-23,85,67,-20,99,34,16,-54,66,-45,71, 
  /* [3][0][][] */ 4,-10,-16,45,-18,14,-16,62,95,80,-127,-34,27,-25,-49,91,-64,-3,-12,29,-22,-10,70,26,10,13,-59,45,-42,47,-57,-40,16,37,10,17,69,-17,50,-7,-54,75,62,14,45,-31,-20,-22, 
  /* [4][0][][] */ -16,-62,20,-57,-6,77,-60,-65,-4,-32,80,36,-68,-9,-18,14,59,16,-30,30,-64,-9,120,-17,-91,-17,0,32,30,-22,-15,67,-38,41,0,53,-29,31,-2,7,-23,56,-42,56,127,66,-27,7, 
  /* [5][0][][] */ -81,-84,51,-127,-30,37,-20,-65,-8,64,-63,70,-91,16,74,-3,83,51,86,26,19,8,-19,-86,30,-81,15,-60,-10,-45,47,-76,-26,-59,76,-14,-43,51,27,89,98,10,20,-44,-19,-4,-40,35, 
  /* [6][0][][] */ -48,-51,27,20,-73,-61,26,-63,-101,14,-107,43,27,-37,68,12,-35,13,20,127,-26,-2,68,48,-82,-11,50,12,9,-35,-26,-48,-34,46,56,-74,-40,61,38,-11,-62,40,91,-62,-4,-31,-33,19, 
  /* [7][0][][] */ 19,8,7,-16,16,24,-59,-44,-127,-35,98,19,0,-33,18,11,22,50,2,-34,-37,11,-18,-44,46,2,-42,18,1,-17,-30,-61,-107,-58,-44,-5,58,-32,-17,-11,57,8,47,-25,16,-48,41,14, 
};
const TfArray<4, int> tensor_dimension36 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant36_scale = { 8, { 0.0052867322228848934, 0.0076143643818795681, 0.0036595796700567007, 0.0060992813669145107, 0.0047290869988501072, 0.0039138896390795708, 0.0045641288161277771, 0.0065249460749328136, } };
const TfArray<8, int> quant36_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant36 = { (TfLiteFloatArray*)&quant36_scale, (TfLiteIntArray*)&quant36_zero, 0 };
const ALIGN(16) int32_t tensor_data37[8] = { -14014, -3519, -1983, -14830, 1076, -59, 13440, 14542, };
const TfArray<1, int> tensor_dimension37 = { 1, { 8 } };
const TfArray<8, float> quant37_scale = { 8, { 9.3468472186941653e-05, 0.00013462059723678976, 6.4700710936449468e-05, 0.00010783419565996155, 8.3609404100570828e-05, 6.9196867116261274e-05, 8.0692974734120071e-05, 0.00011535987141542137, } };
const TfArray<8, int> quant37_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant37 = { (TfLiteFloatArray*)&quant37_scale, (TfLiteIntArray*)&quant37_zero, 0 };
const ALIGN(16) int8_t tensor_data38[48*1*1*8] = { 
  /* [0][0][][] */ -7,2,127,-29,6,62,-7,-73, 
  /* [1][0][][] */ 78,-62,65,-78,-24,-56,127,25, 
  /* [2][0][][] */ 83,54,93,-100,-63,43,127,-14, 
  /* [3][0][][] */ -4,30,15,-11,20,-69,127,1, 
  /* [4][0][][] */ 127,-34,-74,-31,-112,-77,-26,72, 
  /* [5][0][][] */ 34,89,127,9,18,-58,18,-49, 
  /* [6][0][][] */ 97,116,-16,127,-83,15,17,80, 
  /* [7][0][][] */ -31,10,-1,47,28,-127,-119,-44, 
  /* [8][0][][] */ 115,93,-62,103,-80,13,-127,-74, 
  /* [9][0][][] */ 127,-12,-40,46,3,-31,24,-73, 
  /* [10][0][][] */ 72,39,0,24,-41,127,42,3, 
  /* [11][0][][] */ 110,-45,9,-127,119,-60,-67,80, 
  /* [12][0][][] */ -51,111,65,-51,7,64,-75,127, 
  /* [13][0][][] */ 127,21,-86,29,18,-113,40,-116, 
  /* [14][0][][] */ 95,37,-6,-11,-127,30,-61,-20, 
  /* [15][0][][] */ 5,37,-105,-10,-127,-62,113,62, 
  /* [16][0][][] */ 21,-25,127,30,104,-64,-102,-71, 
  /* [17][0][][] */ 23,-7,96,-5,127,-65,-84,-3, 
  /* [18][0][][] */ 103,-32,127,67,-33,12,-38,-7, 
  /* [19][0][][] */ 59,41,44,-64,-40,-127,18,-36, 
  /* [20][0][][] */ 52,-55,68,127,30,-66,-107,105, 
  /* [21][0][][] */ 98,-11,-62,-119,63,-63,-2,127, 
  /* [22][0][][] */ -28,-127,-56,-62,58,-9,80,-47, 
  /* [23][0][][] */ -1,33,20,-36,-103,-127,7,-31, 
  /* [24][0][][] */ 123,-4,71,55,-3,-59,-127,85, 
  /* [25][0][][] */ 60,32,-20,-85,-30,19,5,127, 
  /* [26][0][][] */ -90,-24,32,-127,118,0,-81,-104, 
  /* [27][0][][] */ 92,127,2,-36,1,54,33,-3, 
  /* [28][0][][] */ 36,115,-33,-9,11,-31,-11,127, 
  /* [29][0][][] */ 127,38,78,94,47,-19,-123,44, 
  /* [30][0][][] */ 127,-99,-89,105,49,10,-67,85, 
  /* [31][0][][] */ 94,-68,33,71,-99,-124,-127,49, 
  /* [32][0][][] */ -65,-52,9,-127,88,-40,-44,-67, 
  /* [33][0][][] */ 17,16,25,42,20,-77,127,30, 
  /* [34][0][][] */ -73,105,127,-50,92,-104,-80,79, 
  /* [35][0][][] */ -54,27,1,92,9,127,54,-23, 
  /* [36][0][][] */ 88,21,-23,-127,48,-5,9,54, 
  /* [37][0][][] */ 38,60,-6,16,-84,127,65,36, 
  /* [38][0][][] */ -24,-72,18,104,24,51,-2,127, 
  /* [39][0][][] */ 23,-5,-127,42,4,-34,-39,86, 
  /* [40][0][][] */ 60,32,-108,18,-66,53,-57,127, 
  /* [41][0][][] */ 28,5,1,-48,-101,-127,2,-1, 
  /* [42][0][][] */ -67,83,-99,127,-26,78,-54,-112, 
  /* [43][0][][] */ 3,21,-53,-127,-23,-14,5,-85, 
  /* [44][0][][] */ 70,44,39,98,6,127,-57,32, 
  /* [45][0][][] */ 7,80,-28,20,127,-33,-76,-9, 
  /* [46][0][][] */ 70,-96,-5,127,111,34,-58,99, 
  /* [47][0][][] */ -35,-116,68,0,127,28,52,17, 
};
const TfArray<4, int> tensor_dimension38 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant38_scale = { 48, { 0.0028188449796289206, 0.0039882594719529152, 0.0025260429829359055, 0.0035526480060070753, 0.001739859813824296, 0.0032787984237074852, 0.001744474284350872, 0.0029250981751829386, 0.0014250321546569467, 0.0023723903577774763, 0.0044041401706635952, 0.0012360028922557831, 0.0018289133440703154, 0.0016659778775647283, 0.0016494744922965765, 0.0017370941350236535, 0.0025443558115512133, 0.0010958637576550245, 0.0029731816612184048, 0.0022128343116492033, 0.0026976848021149635, 0.00066189118660986423, 0.00053256039973348379, 0.0036874432116746902, 0.0026865431573241949, 0.0027440974954515696, 0.002196901012212038, 0.0027833385393023491, 0.0022304034791886806, 0.0018987790681421757, 0.00194123899564147, 0.0012791305780410767, 0.0023796721361577511, 0.0038471578154712915, 0.00088360474910587072, 0.002346743131056428, 0.0011617750860750675, 0.0037243643309921026, 0.003462095744907856, 0.0026881163939833641, 0.001852119923569262, 0.0031398925930261612, 0.0013496603351086378, 0.0041910917498171329, 0.0033763395622372627, 0.0025066707748919725, 0.003285698127001524, 0.0013096856418997049, } };
const TfArray<48, int> quant38_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant38 = { (TfLiteFloatArray*)&quant38_scale, (TfLiteIntArray*)&quant38_zero, 0 };
const ALIGN(16) int32_t tensor_data39[48] = { 2210, -1072, 5731, 3210, 6231, 212, 4355, 5507, -6361, -3510, -1389, 12691, 6408, 7797, 11386, -7352, -3571, 18383, 4414, 6654, 5809, 32867, 35615, 1040, -2648, 2342, 503, -1607, 3187, 3965, 6835, 14881, -1156, 549, 22148, 4727, 16361, 3408, 2196, -3375, 6827, -3711, 14348, 96, 642, 3773, -2549, 12302, };
const TfArray<1, int> tensor_dimension39 = { 1, { 48 } };
const TfArray<48, float> quant39_scale = { 48, { 0.00013199028035160154, 0.00018674723105505109, 0.00011828004790004343, 0.00016635005886200815, 8.1467616837471724e-05, 0.00015352726040873677, 8.1683690950740129e-05, 0.00013696550740860403, 6.6726053773891181e-05, 0.00011108538456028327, 0.00020622053125407547, 5.7874898629961535e-05, 8.5637482698075473e-05, 7.8008153650444001e-05, 7.7235396020114422e-05, 8.1338119343854487e-05, 0.00011913753405679017, 5.131299258209765e-05, 0.00013921697973273695, 0.00010361429303884506, 0.00012631704157683998, 3.0992552638053894e-05, 2.4936736735980958e-05, 0.00017266173381358385, 0.00012579535541590303, 0.0001284902828047052, 0.00010286822362104431, 0.00013032772403676063, 0.00010443695646245033, 8.8908891484607011e-05, 9.0897046902682632e-05, 5.989432247588411e-05, 0.00011142634321004152, 0.00018014025408774614, 4.137412179261446e-05, 0.00010988447320414707, 5.439923916128464e-05, 0.00017439054499845952, 0.00016211000911425799, 0.00012586901721078902, 8.6724110587965697e-05, 0.00014702309272252023, 6.3196821429301053e-05, 0.00019624469859991223, 0.00015809453907422721, 0.00011737296154024079, 0.00015385032747872174, 6.1325037677306682e-05, } };
const TfArray<48, int> quant39_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant39 = { (TfLiteFloatArray*)&quant39_scale, (TfLiteIntArray*)&quant39_zero, 0 };
const ALIGN(16) int8_t tensor_data40[32*1*1*48] = { 
  /* [0][0][][] */ 33,5,35,-72,-66,39,13,87,11,-5,-122,-79,-87,121,-41,52,37,98,40,18,-11,-88,-32,36,127,-100,-7,117,71,-49,83,16,-72,95,37,-49,-24,5,-76,-11,-100,-39,114,-104,81,8,-53,100, 
  /* [1][0][][] */ 64,85,97,43,60,-92,-29,84,-1,27,-47,124,-63,-107,15,-52,-5,-21,-3,-26,69,102,-60,-80,54,58,38,-31,74,15,-9,-63,20,-76,-61,-82,88,-55,-5,34,30,103,-26,114,13,-14,5,127, 
  /* [2][0][][] */ 15,-74,-60,-89,-23,23,92,18,51,-23,-42,-62,45,96,-48,-73,-108,28,-45,52,-90,-39,40,54,-119,72,-58,-43,-5,-35,-83,43,35,-42,49,17,-68,41,-110,92,68,1,127,88,-62,-12,15,-7, 
  /* [3][0][][] */ -40,24,51,-41,68,78,66,58,85,32,50,-50,70,41,80,89,-127,49,-30,76,-38,54,-43,17,48,40,-91,23,48,32,-27,77,-93,31,18,-47,-58,-12,-56,-25,-52,-13,-28,-6,-34,-57,-29,-37, 
  /* [4][0][][] */ -87,-17,52,-18,27,-5,-31,-45,3,37,-101,-69,-86,62,7,-95,50,16,-43,-75,-80,44,-102,-37,-59,-127,51,9,-9,-103,71,9,-105,24,-60,-45,54,-27,-99,-101,62,44,-86,-111,-29,52,-57,-49, 
  /* [5][0][][] */ -74,34,-30,-38,19,-9,-21,62,9,-56,64,14,-68,38,100,105,-127,100,91,2,104,7,-42,105,-112,20,-63,-42,-9,46,53,4,-88,69,56,59,82,-42,-52,-28,64,7,-1,-89,99,106,7,-22, 
  /* [6][0][][] */ 74,-39,-22,-112,-125,-52,25,-116,-3,47,2,81,22,-89,-49,81,-89,61,7,57,-127,76,56,2,-73,16,-123,-120,-67,-110,-23,19,-107,-10,39,47,-127,-73,-19,29,-109,12,46,-20,-122,51,-114,-52, 
  /* [7][0][][] */ 55,54,-61,-120,119,-49,-55,-64,-2,-107,-33,-7,-36,92,86,71,61,-11,-69,44,50,-84,-12,-63,70,-45,88,74,-85,-57,-15,3,-76,-64,62,-53,125,-23,-19,-64,-75,36,-80,127,-25,-61,-89,-54, 
  /* [8][0][][] */ -67,-28,-109,-16,40,-16,-25,-105,94,-82,127,-103,-41,-93,-115,-5,-1,47,52,-79,63,32,62,-68,-61,-90,-5,-84,-72,-86,-105,-23,-54,-14,-97,76,-115,-105,-63,-60,-25,20,15,-30,-26,-70,-38,60, 
  /* [9][0][][] */ -21,-99,29,77,21,80,102,48,45,71,69,37,100,64,-18,-14,-40,-53,-48,-61,-61,75,19,-6,-65,-91,-80,57,78,-77,-27,57,-127,-47,106,-15,-37,4,-62,-59,93,94,15,-44,55,71,25,-34, 
  /* [10][0][][] */ -56,49,-57,-68,-16,112,-85,-44,98,-56,69,86,11,53,91,-5,105,52,-24,59,42,-26,-5,88,88,104,-50,-10,-72,-20,22,-56,25,45,127,-68,123,-56,57,115,94,34,56,63,7,65,4,19, 
  /* [11][0][][] */ 68,10,-46,-70,57,-9,-22,-73,-48,46,58,-27,18,-58,44,-59,-119,48,-11,-44,-34,-38,45,-63,-96,58,21,73,6,40,-8,27,9,58,-100,-51,-1,102,-49,-87,37,-109,87,-127,80,15,-88,-36, 
  /* [12][0][][] */ -66,-91,-80,100,-11,-39,-48,-67,-15,4,-64,12,-81,-91,-51,59,11,-46,27,96,-79,-41,53,41,-51,37,-119,-31,84,-83,58,65,-12,-32,-12,-65,-14,-85,72,39,59,65,47,-127,12,-23,-91,66, 
  /* [13][0][][] */ 64,11,47,-81,79,33,22,-43,5,-113,6,23,3,64,23,44,77,65,19,68,127,-18,-7,-71,110,-96,-1,-94,17,-70,-40,0,-12,-103,43,-4,46,-119,87,20,-33,-63,57,33,47,-9,68,70, 
  /* [14][0][][] */ -25,-88,72,50,38,-51,27,-1,14,63,0,-64,0,88,-10,43,-127,-22,-13,-60,-1,29,-32,-15,-55,-29,8,26,64,-51,50,-26,-77,76,78,26,17,62,-71,-54,75,94,90,-15,64,-45,-12,-53, 
  /* [15][0][][] */ 18,23,26,-44,-69,80,27,48,-76,-32,126,-41,13,-33,-12,-15,-55,63,-99,34,-43,-57,-45,3,-23,15,74,109,2,-83,-104,31,38,88,-40,-10,-1,118,-54,-60,-24,127,111,-34,91,43,-90,-101, 
  /* [16][0][][] */ 8,-39,-83,127,85,-39,123,122,-5,71,101,-80,-40,101,-101,-11,7,84,-41,-11,-91,-16,-95,33,98,-86,-121,39,-27,123,110,45,-126,-29,22,25,-16,100,-108,75,47,47,92,-93,-73,7,-97,-74, 
  /* [17][0][][] */ -48,105,-127,-50,-48,19,-70,72,-5,-59,70,-40,-58,74,3,-77,52,50,-57,46,-9,-41,-82,-34,-120,-7,-58,-88,-54,12,35,-127,87,-54,-56,14,12,-82,-47,25,-68,100,-56,-99,73,-9,-106,-116, 
  /* [18][0][][] */ 58,-60,-127,-30,44,2,-124,-109,-68,26,-21,-84,-18,76,6,28,8,71,-99,-55,-97,34,8,20,22,24,24,-105,-30,-123,19,-126,-39,68,92,-72,16,-52,-68,-28,-35,16,94,-69,-37,26,99,-67, 
  /* [19][0][][] */ 49,60,-75,91,111,50,-43,3,101,-21,31,-55,34,87,116,-13,-8,-106,-59,113,-111,-68,34,127,5,-1,15,-24,79,11,95,-109,54,-12,-109,83,-88,0,-95,36,76,57,56,88,-40,33,-118,67, 
  /* [20][0][][] */ 6,-127,-11,56,71,42,85,54,-18,-33,16,-10,-18,-58,9,-72,-31,-38,103,44,68,-90,79,-7,-73,60,-92,18,18,-34,-35,17,11,92,71,-37,77,18,-75,14,74,-84,-58,-59,50,29,-28,-40, 
  /* [21][0][][] */ 60,59,80,-81,-52,-65,-68,-36,-2,105,13,-98,-65,-59,-82,-114,-72,-29,-67,-99,-29,35,87,-55,51,1,23,-49,-72,-98,80,-1,-126,12,62,93,-112,-71,-103,-15,-16,12,-29,-27,-65,74,-127,42, 
  /* [22][0][][] */ -16,-90,55,-23,-70,-74,87,56,44,-8,-37,8,-50,32,-22,-80,-127,-9,-71,65,44,89,-12,72,-93,22,-93,38,-31,-60,-58,-60,-104,94,24,41,17,-83,-57,-51,-27,-2,-58,-18,30,-34,88,-77, 
  /* [23][0][][] */ -26,-61,17,-24,-84,23,72,22,43,-64,64,-108,-95,85,65,-26,9,36,52,30,56,85,53,9,33,-68,-86,-44,-69,86,-7,104,52,-45,89,-9,-12,101,67,-62,95,49,96,-127,-71,8,-80,76, 
  /* [24][0][][] */ -24,127,77,67,56,-44,-114,68,-28,-103,-84,87,12,-19,-24,-70,-22,20,-73,53,76,-30,-33,6,-8,84,-41,-45,56,72,79,-39,110,-61,-23,-40,14,-56,-86,-70,6,73,-88,73,-58,47,54,-58, 
  /* [25][0][][] */ -29,-21,-35,54,-13,35,-103,39,-37,48,21,66,-85,53,64,-126,-43,-10,-72,-6,86,86,-51,69,80,-81,-76,-58,64,92,-98,62,-85,-75,100,91,-127,18,-80,88,-118,76,42,-64,-23,-81,-94,-103, 
  /* [26][0][][] */ 49,-44,-27,-32,47,-115,65,-57,15,-52,-107,-15,-57,-87,8,-50,76,-11,-91,-93,21,-70,42,58,9,-44,26,10,-8,-28,-67,-60,-40,18,18,81,-24,56,-127,67,57,-23,-49,-95,-28,25,90,-8, 
  /* [27][0][][] */ 34,106,-99,84,0,-43,-8,-17,-91,58,-20,19,-92,52,61,-49,24,-96,-20,-98,-32,47,63,-86,-50,127,-35,56,76,-61,65,-97,87,-81,28,73,102,41,-64,-22,48,43,-33,105,46,-79,119,-57, 
  /* [28][0][][] */ -105,49,-43,87,1,119,-90,11,86,-47,-103,68,72,-69,31,-118,-83,85,56,107,125,80,15,-77,73,-105,67,119,-42,48,-20,51,-33,29,-32,-44,30,107,-28,109,-108,-29,8,17,127,127,-5,2, 
  /* [29][0][][] */ 19,-65,32,20,-42,6,24,-99,-58,-36,-57,-94,51,-24,-76,-41,40,76,-68,87,29,-66,-78,-74,45,-83,-127,-78,-44,74,-66,20,-126,106,91,1,-36,-87,27,-48,86,-53,-16,-4,-88,41,-110,-8, 
  /* [30][0][][] */ -100,-56,-109,-70,56,59,26,-23,-98,15,1,35,64,33,-127,-79,65,80,45,-18,-41,-99,89,-96,15,76,-48,12,58,-75,-19,15,-18,-47,-4,0,-107,-59,48,-9,-28,-113,-94,-61,48,87,-66,-60, 
  /* [31][0][][] */ 44,96,88,-17,-53,-12,109,-69,-56,-31,87,-66,-75,-62,102,44,-50,41,-42,40,-37,-26,106,25,0,83,-42,-61,-9,58,52,67,62,46,47,113,56,127,-40,-62,10,113,-68,48,27,92,25,-28, 
};
const TfArray<4, int> tensor_dimension40 = { 4, { 32,1,1,48 } };
const TfArray<32, float> quant40_scale = { 32, { 0.0024359305389225483, 0.0026258621364831924, 0.002370473463088274, 0.0036392821930348873, 0.0028997063636779785, 0.0027542891912162304, 0.0025034386198967695, 0.0023743489291518927, 0.0026903834659606218, 0.0024181490298360586, 0.0025919531472027302, 0.002938826335594058, 0.0026316018775105476, 0.0026358065661042929, 0.0032770049292594194, 0.0027570510283112526, 0.0023576822131872177, 0.0023390494752675295, 0.0023843410890549421, 0.0024167182855308056, 0.0028889775276184082, 0.0027167496737092733, 0.0030922817531973124, 0.002664969302713871, 0.002753089414909482, 0.00236843666061759, 0.0025479316245764494, 0.0028345987666398287, 0.0022269375622272491, 0.0025759667623788118, 0.0023958466481417418, 0.0024077969137579203, } };
const TfArray<32, int> quant40_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant40 = { (TfLiteFloatArray*)&quant40_scale, (TfLiteIntArray*)&quant40_zero, 0 };
const ALIGN(16) int32_t tensor_data41[32] = { 450, 240, 759, 404, -600, 402, -1213, -601, -1185, 252, 1756, -78, -133, 28, 405, 900, 499, -1395, -946, 418, 327, -520, 366, 362, -1002, -965, -1396, -365, 529, -67, -1423, 697, };
const TfArray<1, int> tensor_dimension41 = { 1, { 32 } };
const TfArray<32, float> quant41_scale = { 32, { 4.1765513742575422e-05, 4.5022006815997884e-05, 4.0643211832502857e-05, 6.2397710280492902e-05, 4.9717233196133748e-05, 4.7223966248566285e-05, 4.2922980355797336e-05, 4.0709659515414387e-05, 4.6128265239531174e-05, 4.1460640204604715e-05, 4.444061778485775e-05, 5.0387967348797247e-05, 4.5120417780708522e-05, 4.5192511606728658e-05, 5.6186247093137354e-05, 4.7271321818698198e-05, 4.042389991809614e-05, 4.0104427171172574e-05, 4.0880982851376757e-05, 4.1436109313508496e-05, 4.9533278797753155e-05, 4.6580327762058005e-05, 5.3019055485492572e-05, 4.5692522689932957e-05, 4.7203397116390988e-05, 4.0608290873933583e-05, 4.3685839045792818e-05, 4.8600923037156463e-05, 3.8182202843017876e-05, 4.4166521547595039e-05, 4.1078252252191305e-05, 4.1283146856585518e-05, } };
const TfArray<32, int> quant41_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant41 = { (TfLiteFloatArray*)&quant41_scale, (TfLiteIntArray*)&quant41_zero, 0 };
const ALIGN(16) int8_t tensor_data42[3*1*1*32] = { 
  /* [0][0][][] */ -57,127,-20,-31,59,-23,-74,-28,47,-18,8,-38,70,83,-33,-54,-65,-18,-69,13,12,-52,40,-25,30,15,37,26,41,55,-20,94, 
  /* [1][0][][] */ 99,-127,-87,13,-3,51,-89,-90,-50,117,44,10,79,84,-3,-56,110,-19,-84,-81,115,7,8,56,-68,79,-1,-63,74,18,-51,-27, 
  /* [2][0][][] */ -11,-96,109,102,-3,68,-85,23,-46,36,-127,93,7,-75,102,67,91,-60,-63,96,11,25,29,52,-96,-37,9,-8,12,66,-41,56, 
};
const TfArray<4, int> tensor_dimension42 = { 4, { 3,1,1,32 } };
const TfArray<3, float> quant42_scale = { 3, { 0.0049346867017447948, 0.0033198029268532991, 0.0035680530127137899, } };
const TfArray<3, int> quant42_zero = { 3, { 0,0,0 } };
const TfLiteAffineQuantization quant42 = { (TfLiteFloatArray*)&quant42_scale, (TfLiteIntArray*)&quant42_zero, 0 };
const ALIGN(8) int32_t tensor_data43[3] = { 36128, -65387, -54561, };
const TfArray<1, int> tensor_dimension43 = { 1, { 3 } };
const TfArray<3, float> quant43_scale = { 3, { 0.00010002701310440898, 6.7293018219061196e-05, 7.232509960886091e-05, } };
const TfArray<3, int> quant43_zero = { 3, { 0,0,0 } };
const TfLiteAffineQuantization quant43 = { (TfLiteFloatArray*)&quant43_scale, (TfLiteIntArray*)&quant43_zero, 0 };
const TfArray<4, int> tensor_dimension44 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant44_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant44_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant44 = { (TfLiteFloatArray*)&quant44_scale, (TfLiteIntArray*)&quant44_zero, 0 };
const TfArray<4, int> tensor_dimension45 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant45_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant45_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant45 = { (TfLiteFloatArray*)&quant45_scale, (TfLiteIntArray*)&quant45_zero, 0 };
const TfArray<4, int> tensor_dimension46 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant46_scale = { 1, { 0.051733434200286865, } };
const TfArray<1, int> quant46_zero = { 1, { 23 } };
const TfLiteAffineQuantization quant46 = { (TfLiteFloatArray*)&quant46_scale, (TfLiteIntArray*)&quant46_zero, 0 };
const TfArray<4, int> tensor_dimension47 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant47_scale = { 1, { 0.067582599818706512, } };
const TfArray<1, int> quant47_zero = { 1, { -12 } };
const TfLiteAffineQuantization quant47 = { (TfLiteFloatArray*)&quant47_scale, (TfLiteIntArray*)&quant47_zero, 0 };
const TfArray<4, int> tensor_dimension48 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant48_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant48_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant48 = { (TfLiteFloatArray*)&quant48_scale, (TfLiteIntArray*)&quant48_zero, 0 };
const TfArray<4, int> tensor_dimension49 = { 4, { 1,25,25,48 } };
const TfArray<1, float> quant49_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant49_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant49 = { (TfLiteFloatArray*)&quant49_scale, (TfLiteIntArray*)&quant49_zero, 0 };
const TfArray<4, int> tensor_dimension50 = { 4, { 1,12,12,48 } };
const TfArray<1, float> quant50_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant50_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant50 = { (TfLiteFloatArray*)&quant50_scale, (TfLiteIntArray*)&quant50_zero, 0 };
const TfArray<4, int> tensor_dimension51 = { 4, { 1,12,12,8 } };
const TfArray<1, float> quant51_scale = { 1, { 0.035531140863895416, } };
const TfArray<1, int> quant51_zero = { 1, { 6 } };
const TfLiteAffineQuantization quant51 = { (TfLiteFloatArray*)&quant51_scale, (TfLiteIntArray*)&quant51_zero, 0 };
const TfArray<4, int> tensor_dimension52 = { 4, { 1,12,12,48 } };
const TfArray<1, float> quant52_scale = { 1, { 0.023070776835083961, } };
const TfArray<1, int> quant52_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant52 = { (TfLiteFloatArray*)&quant52_scale, (TfLiteIntArray*)&quant52_zero, 0 };
const TfArray<4, int> tensor_dimension53 = { 4, { 1,12,12,48 } };
const TfArray<1, float> quant53_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant53_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant53 = { (TfLiteFloatArray*)&quant53_scale, (TfLiteIntArray*)&quant53_zero, 0 };
const TfArray<4, int> tensor_dimension54 = { 4, { 1,12,12,8 } };
const TfArray<1, float> quant54_scale = { 1, { 0.073451995849609375, } };
const TfArray<1, int> quant54_zero = { 1, { -6 } };
const TfLiteAffineQuantization quant54 = { (TfLiteFloatArray*)&quant54_scale, (TfLiteIntArray*)&quant54_zero, 0 };
const TfArray<4, int> tensor_dimension55 = { 4, { 1,12,12,8 } };
const TfArray<1, float> quant55_scale = { 1, { 0.077395208179950714, } };
const TfArray<1, int> quant55_zero = { 1, { 6 } };
const TfLiteAffineQuantization quant55 = { (TfLiteFloatArray*)&quant55_scale, (TfLiteIntArray*)&quant55_zero, 0 };
const TfArray<4, int> tensor_dimension56 = { 4, { 1,12,12,48 } };
const TfArray<1, float> quant56_scale = { 1, { 0.019751416519284248, } };
const TfArray<1, int> quant56_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant56 = { (TfLiteFloatArray*)&quant56_scale, (TfLiteIntArray*)&quant56_zero, 0 };
const TfArray<4, int> tensor_dimension57 = { 4, { 1,13,13,48 } };
const TfArray<1, float> quant57_scale = { 1, { 0.019751416519284248, } };
const TfArray<1, int> quant57_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant57 = { (TfLiteFloatArray*)&quant57_scale, (TfLiteIntArray*)&quant57_zero, 0 };
const TfArray<4, int> tensor_dimension58 = { 4, { 1,6,6,48 } };
const TfArray<1, float> quant58_scale = { 1, { 0.02174658514559269, } };
const TfArray<1, int> quant58_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant58 = { (TfLiteFloatArray*)&quant58_scale, (TfLiteIntArray*)&quant58_zero, 0 };
const TfArray<4, int> tensor_dimension59 = { 4, { 1,6,6,8 } };
const TfArray<1, float> quant59_scale = { 1, { 0.042956411838531494, } };
const TfArray<1, int> quant59_zero = { 1, { -3 } };
const TfLiteAffineQuantization quant59 = { (TfLiteFloatArray*)&quant59_scale, (TfLiteIntArray*)&quant59_zero, 0 };
const TfArray<4, int> tensor_dimension60 = { 4, { 1,6,6,48 } };
const TfArray<1, float> quant60_scale = { 1, { 0.01916089840233326, } };
const TfArray<1, int> quant60_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant60 = { (TfLiteFloatArray*)&quant60_scale, (TfLiteIntArray*)&quant60_zero, 0 };
const TfArray<4, int> tensor_dimension61 = { 4, { 1,6,6,48 } };
const TfArray<1, float> quant61_scale = { 1, { 0.020200667902827263, } };
const TfArray<1, int> quant61_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant61 = { (TfLiteFloatArray*)&quant61_scale, (TfLiteIntArray*)&quant61_zero, 0 };
const TfArray<4, int> tensor_dimension62 = { 4, { 1,6,6,8 } };
const TfArray<1, float> quant62_scale = { 1, { 0.026848811656236649, } };
const TfArray<1, int> quant62_zero = { 1, { -36 } };
const TfLiteAffineQuantization quant62 = { (TfLiteFloatArray*)&quant62_scale, (TfLiteIntArray*)&quant62_zero, 0 };
const TfArray<4, int> tensor_dimension63 = { 4, { 1,6,6,8 } };
const TfArray<1, float> quant63_scale = { 1, { 0.043424330651760101, } };
const TfArray<1, int> quant63_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant63 = { (TfLiteFloatArray*)&quant63_scale, (TfLiteIntArray*)&quant63_zero, 0 };
const TfArray<4, int> tensor_dimension64 = { 4, { 1,6,6,48 } };
const TfArray<1, float> quant64_scale = { 1, { 0.015088647603988647, } };
const TfArray<1, int> quant64_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant64 = { (TfLiteFloatArray*)&quant64_scale, (TfLiteIntArray*)&quant64_zero, 0 };
const TfArray<4, int> tensor_dimension65 = { 4, { 1,6,6,48 } };
const TfArray<1, float> quant65_scale = { 1, { 0.017679819837212563, } };
const TfArray<1, int> quant65_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant65 = { (TfLiteFloatArray*)&quant65_scale, (TfLiteIntArray*)&quant65_zero, 0 };
const TfArray<4, int> tensor_dimension66 = { 4, { 1,6,6,8 } };
const TfArray<1, float> quant66_scale = { 1, { 0.031577248126268387, } };
const TfArray<1, int> quant66_zero = { 1, { -4 } };
const TfLiteAffineQuantization quant66 = { (TfLiteFloatArray*)&quant66_scale, (TfLiteIntArray*)&quant66_zero, 0 };
const TfArray<4, int> tensor_dimension67 = { 4, { 1,6,6,8 } };
const TfArray<1, float> quant67_scale = { 1, { 0.046824242919683456, } };
const TfArray<1, int> quant67_zero = { 1, { 2 } };
const TfLiteAffineQuantization quant67 = { (TfLiteFloatArray*)&quant67_scale, (TfLiteIntArray*)&quant67_zero, 0 };
const TfArray<4, int> tensor_dimension68 = { 4, { 1,6,6,48 } };
const TfArray<1, float> quant68_scale = { 1, { 0.017145609483122826, } };
const TfArray<1, int> quant68_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant68 = { (TfLiteFloatArray*)&quant68_scale, (TfLiteIntArray*)&quant68_zero, 0 };
const TfArray<4, int> tensor_dimension69 = { 4, { 1,6,6,32 } };
const TfArray<1, float> quant69_scale = { 1, { 0.020270185545086861, } };
const TfArray<1, int> quant69_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant69 = { (TfLiteFloatArray*)&quant69_scale, (TfLiteIntArray*)&quant69_zero, 0 };
const TfArray<4, int> tensor_dimension70 = { 4, { 1,6,6,3 } };
const TfArray<1, float> quant70_scale = { 1, { 0.064183555543422699, } };
const TfArray<1, int> quant70_zero = { 1, { -10 } };
const TfLiteAffineQuantization quant70 = { (TfLiteFloatArray*)&quant70_scale, (TfLiteIntArray*)&quant70_zero, 0 };
const TfArray<4, int> tensor_dimension71 = { 4, { 1,6,6,3 } };
const TfArray<1, float> quant71_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant71_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant71 = { (TfLiteFloatArray*)&quant71_scale, (TfLiteIntArray*)&quant71_zero, 0 };
const TfLiteConvParams opdata0 = { kTfLitePaddingSame, 2,2, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs0 = { 3, { 0,2,3 } };
const TfArray<1, int> outputs0 = { 1, { 44 } };
const TfLiteDepthwiseConvParams opdata1 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs1 = { 3, { 44,4,5 } };
const TfArray<1, int> outputs1 = { 1, { 45 } };
const TfLiteConvParams opdata2 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs2 = { 3, { 45,6,7 } };
const TfArray<1, int> outputs2 = { 1, { 46 } };
const TfLiteAddParams opdata3 = { kTfLiteActNone };
const TfArray<2, int> inputs3 = { 2, { 44,46 } };
const TfArray<1, int> outputs3 = { 1, { 47 } };
const TfLiteConvParams opdata4 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs4 = { 3, { 47,8,9 } };
const TfArray<1, int> outputs4 = { 1, { 48 } };
const TfArray<2, int> inputs5 = { 2, { 48,1 } };
const TfArray<1, int> outputs5 = { 1, { 49 } };
const TfLiteDepthwiseConvParams opdata6 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs6 = { 3, { 49,10,11 } };
const TfArray<1, int> outputs6 = { 1, { 50 } };
const TfLiteConvParams opdata7 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs7 = { 3, { 50,12,13 } };
const TfArray<1, int> outputs7 = { 1, { 51 } };
const TfLiteConvParams opdata8 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs8 = { 3, { 51,14,15 } };
const TfArray<1, int> outputs8 = { 1, { 52 } };
const TfLiteDepthwiseConvParams opdata9 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs9 = { 3, { 52,16,17 } };
const TfArray<1, int> outputs9 = { 1, { 53 } };
const TfLiteConvParams opdata10 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs10 = { 3, { 53,18,19 } };
const TfArray<1, int> outputs10 = { 1, { 54 } };
const TfLiteAddParams opdata11 = { kTfLiteActNone };
const TfArray<2, int> inputs11 = { 2, { 51,54 } };
const TfArray<1, int> outputs11 = { 1, { 55 } };
const TfLiteConvParams opdata12 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs12 = { 3, { 55,20,21 } };
const TfArray<1, int> outputs12 = { 1, { 56 } };
const TfArray<2, int> inputs13 = { 2, { 56,1 } };
const TfArray<1, int> outputs13 = { 1, { 57 } };
const TfLiteDepthwiseConvParams opdata14 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs14 = { 3, { 57,22,23 } };
const TfArray<1, int> outputs14 = { 1, { 58 } };
const TfLiteConvParams opdata15 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs15 = { 3, { 58,24,25 } };
const TfArray<1, int> outputs15 = { 1, { 59 } };
const TfLiteConvParams opdata16 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs16 = { 3, { 59,26,27 } };
const TfArray<1, int> outputs16 = { 1, { 60 } };
const TfLiteDepthwiseConvParams opdata17 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs17 = { 3, { 60,28,29 } };
const TfArray<1, int> outputs17 = { 1, { 61 } };
const TfLiteConvParams opdata18 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs18 = { 3, { 61,30,31 } };
const TfArray<1, int> outputs18 = { 1, { 62 } };
const TfLiteAddParams opdata19 = { kTfLiteActNone };
const TfArray<2, int> inputs19 = { 2, { 59,62 } };
const TfArray<1, int> outputs19 = { 1, { 63 } };
const TfLiteConvParams opdata20 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs20 = { 3, { 63,32,33 } };
const TfArray<1, int> outputs20 = { 1, { 64 } };
const TfLiteDepthwiseConvParams opdata21 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs21 = { 3, { 64,34,35 } };
const TfArray<1, int> outputs21 = { 1, { 65 } };
const TfLiteConvParams opdata22 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs22 = { 3, { 65,36,37 } };
const TfArray<1, int> outputs22 = { 1, { 66 } };
const TfLiteAddParams opdata23 = { kTfLiteActNone };
const TfArray<2, int> inputs23 = { 2, { 63,66 } };
const TfArray<1, int> outputs23 = { 1, { 67 } };
const TfLiteConvParams opdata24 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs24 = { 3, { 67,38,39 } };
const TfArray<1, int> outputs24 = { 1, { 68 } };
const TfLiteConvParams opdata25 = { kTfLitePaddingValid, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs25 = { 3, { 68,40,41 } };
const TfArray<1, int> outputs25 = { 1, { 69 } };
const TfLiteConvParams opdata26 = { kTfLitePaddingValid, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs26 = { 3, { 69,42,43 } };
const TfArray<1, int> outputs26 = { 1, { 70 } };
const TfLiteSoftmaxParams opdata27 = { 1 };
const TfArray<1, int> inputs27 = { 1, { 70 } };
const TfArray<1, int> outputs27 = { 1, { 71 } };
const TensorInfo_t tensorData[] = {
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension0, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant0))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data1, (TfLiteIntArray*)&tensor_dimension1, 32, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data2, (TfLiteIntArray*)&tensor_dimension2, 72, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant2))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data3, (TfLiteIntArray*)&tensor_dimension3, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant3))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data4, (TfLiteIntArray*)&tensor_dimension4, 72, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant4))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data5, (TfLiteIntArray*)&tensor_dimension5, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant5))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data6, (TfLiteIntArray*)&tensor_dimension6, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant6))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data7, (TfLiteIntArray*)&tensor_dimension7, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant7))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data8, (TfLiteIntArray*)&tensor_dimension8, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant8))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data9, (TfLiteIntArray*)&tensor_dimension9, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant9))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data10, (TfLiteIntArray*)&tensor_dimension10, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant10))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data11, (TfLiteIntArray*)&tensor_dimension11, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant11))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data12, (TfLiteIntArray*)&tensor_dimension12, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant12))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data13, (TfLiteIntArray*)&tensor_dimension13, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant13))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data14, (TfLiteIntArray*)&tensor_dimension14, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant14))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data15, (TfLiteIntArray*)&tensor_dimension15, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant15))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data16, (TfLiteIntArray*)&tensor_dimension16, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant16))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data17, (TfLiteIntArray*)&tensor_dimension17, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant17))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data18, (TfLiteIntArray*)&tensor_dimension18, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant18))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data19, (TfLiteIntArray*)&tensor_dimension19, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant19))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data20, (TfLiteIntArray*)&tensor_dimension20, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant20))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data21, (TfLiteIntArray*)&tensor_dimension21, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant21))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data22, (TfLiteIntArray*)&tensor_dimension22, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant22))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data23, (TfLiteIntArray*)&tensor_dimension23, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant23))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data24, (TfLiteIntArray*)&tensor_dimension24, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant24))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data25, (TfLiteIntArray*)&tensor_dimension25, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant25))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data26, (TfLiteIntArray*)&tensor_dimension26, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant26))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data27, (TfLiteIntArray*)&tensor_dimension27, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant27))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data28, (TfLiteIntArray*)&tensor_dimension28, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant28))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data29, (TfLiteIntArray*)&tensor_dimension29, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant29))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data30, (TfLiteIntArray*)&tensor_dimension30, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant30))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data31, (TfLiteIntArray*)&tensor_dimension31, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant31))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data32, (TfLiteIntArray*)&tensor_dimension32, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant32))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data33, (TfLiteIntArray*)&tensor_dimension33, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant33))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data34, (TfLiteIntArray*)&tensor_dimension34, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant34))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data35, (TfLiteIntArray*)&tensor_dimension35, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant35))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data36, (TfLiteIntArray*)&tensor_dimension36, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant36))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data37, (TfLiteIntArray*)&tensor_dimension37, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant37))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data38, (TfLiteIntArray*)&tensor_dimension38, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant38))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data39, (TfLiteIntArray*)&tensor_dimension39, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant39))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data40, (TfLiteIntArray*)&tensor_dimension40, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant40))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data41, (TfLiteIntArray*)&tensor_dimension41, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant41))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data42, (TfLiteIntArray*)&tensor_dimension42, 96, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant42))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data43, (TfLiteIntArray*)&tensor_dimension43, 12, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant43))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 9216, (TfLiteIntArray*)&tensor_dimension44, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant44))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension45, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant45))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 4608, (TfLiteIntArray*)&tensor_dimension46, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant46))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension47, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant47))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 30000, (TfLiteIntArray*)&tensor_dimension48, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant48))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension49, 30000, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant49))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 30000, (TfLiteIntArray*)&tensor_dimension50, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant50))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 13824, (TfLiteIntArray*)&tensor_dimension51, 1152, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant51))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 6912, (TfLiteIntArray*)&tensor_dimension52, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant52))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension53, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant53))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 6912, (TfLiteIntArray*)&tensor_dimension54, 1152, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant54))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension55, 1152, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant55))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 8112, (TfLiteIntArray*)&tensor_dimension56, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant56))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension57, 8112, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant57))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 8112, (TfLiteIntArray*)&tensor_dimension58, 1728, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant58))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 4608, (TfLiteIntArray*)&tensor_dimension59, 288, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant59))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 1728, (TfLiteIntArray*)&tensor_dimension60, 1728, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant60))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension61, 1728, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant61))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 1728, (TfLiteIntArray*)&tensor_dimension62, 288, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant62))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 4320, (TfLiteIntArray*)&tensor_dimension63, 288, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant63))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 1728, (TfLiteIntArray*)&tensor_dimension64, 1728, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant64))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension65, 1728, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant65))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 2016, (TfLiteIntArray*)&tensor_dimension66, 288, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant66))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 1728, (TfLiteIntArray*)&tensor_dimension67, 288, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant67))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension68, 1728, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant68))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 1728, (TfLiteIntArray*)&tensor_dimension69, 1152, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant69))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 112, (TfLiteIntArray*)&tensor_dimension70, 108, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant70))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension71, 108, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant71))}, },
};const NodeInfo_t nodeData[] = {
  { (TfLiteIntArray*)&inputs0, (TfLiteIntArray*)&outputs0, const_cast<void*>(static_cast<const void*>(&opdata0)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs1, (TfLiteIntArray*)&outputs1, const_cast<void*>(static_cast<const void*>(&opdata1)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs2, (TfLiteIntArray*)&outputs2, const_cast<void*>(static_cast<const void*>(&opdata2)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs3, (TfLiteIntArray*)&outputs3, const_cast<void*>(static_cast<const void*>(&opdata3)), OP_ADD, },
  { (TfLiteIntArray*)&inputs4, (TfLiteIntArray*)&outputs4, const_cast<void*>(static_cast<const void*>(&opdata4)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs5, (TfLiteIntArray*)&outputs5, nullptr, OP_PAD, },
  { (TfLiteIntArray*)&inputs6, (TfLiteIntArray*)&outputs6, const_cast<void*>(static_cast<const void*>(&opdata6)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs7, (TfLiteIntArray*)&outputs7, const_cast<void*>(static_cast<const void*>(&opdata7)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs8, (TfLiteIntArray*)&outputs8, const_cast<void*>(static_cast<const void*>(&opdata8)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs9, (TfLiteIntArray*)&outputs9, const_cast<void*>(static_cast<const void*>(&opdata9)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs10, (TfLiteIntArray*)&outputs10, const_cast<void*>(static_cast<const void*>(&opdata10)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs11, (TfLiteIntArray*)&outputs11, const_cast<void*>(static_cast<const void*>(&opdata11)), OP_ADD, },
  { (TfLiteIntArray*)&inputs12, (TfLiteIntArray*)&outputs12, const_cast<void*>(static_cast<const void*>(&opdata12)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs13, (TfLiteIntArray*)&outputs13, nullptr, OP_PAD, },
  { (TfLiteIntArray*)&inputs14, (TfLiteIntArray*)&outputs14, const_cast<void*>(static_cast<const void*>(&opdata14)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs15, (TfLiteIntArray*)&outputs15, const_cast<void*>(static_cast<const void*>(&opdata15)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs16, (TfLiteIntArray*)&outputs16, const_cast<void*>(static_cast<const void*>(&opdata16)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs17, (TfLiteIntArray*)&outputs17, const_cast<void*>(static_cast<const void*>(&opdata17)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs18, (TfLiteIntArray*)&outputs18, const_cast<void*>(static_cast<const void*>(&opdata18)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs19, (TfLiteIntArray*)&outputs19, const_cast<void*>(static_cast<const void*>(&opdata19)), OP_ADD, },
  { (TfLiteIntArray*)&inputs20, (TfLiteIntArray*)&outputs20, const_cast<void*>(static_cast<const void*>(&opdata20)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs21, (TfLiteIntArray*)&outputs21, const_cast<void*>(static_cast<const void*>(&opdata21)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs22, (TfLiteIntArray*)&outputs22, const_cast<void*>(static_cast<const void*>(&opdata22)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs23, (TfLiteIntArray*)&outputs23, const_cast<void*>(static_cast<const void*>(&opdata23)), OP_ADD, },
  { (TfLiteIntArray*)&inputs24, (TfLiteIntArray*)&outputs24, const_cast<void*>(static_cast<const void*>(&opdata24)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs25, (TfLiteIntArray*)&outputs25, const_cast<void*>(static_cast<const void*>(&opdata25)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs26, (TfLiteIntArray*)&outputs26, const_cast<void*>(static_cast<const void*>(&opdata26)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs27, (TfLiteIntArray*)&outputs27, const_cast<void*>(static_cast<const void*>(&opdata27)), OP_SOFTMAX, },
};

static void init_tflite_tensor(size_t i, TfLiteTensor *tensor) {
  tensor->type = tensorData[i].type;
  tensor->is_variable = 0;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  tensor->allocation_type = tensorData[i].allocation_type;
#else
  tensor->allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
  tensor->bytes = tensorData[i].bytes;
  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  if(tensor->allocation_type == kTfLiteArenaRw){
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
      tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
  tensor->quantization = tensorData[i].quantization;
  if (tensor->quantization.type == kTfLiteAffineQuantization) {
    TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
    tensor->params.scale = quant->scale->data[0];
    tensor->params.zero_point = quant->zero_point->data[0];
  }

}

static void init_tflite_eval_tensor(int i, TfLiteEvalTensor *tensor) {
  if (i < 0) {
    tensor->data.data = nullptr;
    tensor->dims = nullptr;
    return;
  }

  tensor->type = tensorData[i].type;

  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  auto allocation_type = tensorData[i].allocation_type;
  if(allocation_type == kTfLiteArenaRw) {
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
    tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
}

static void* overflow_buffers[EI_MAX_OVERFLOW_BUFFER_COUNT];
static size_t overflow_buffers_ix = 0;
static void * AllocatePersistentBuffer(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  if (current_location - bytes < tensor_boundary) {
    if (overflow_buffers_ix > EI_MAX_OVERFLOW_BUFFER_COUNT - 1) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d, does not fit in tensor arena and reached EI_MAX_OVERFLOW_BUFFER_COUNT\n",
        (int)bytes);
      return NULL;
    }

    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers[overflow_buffers_ix++] = ptr;
    return ptr;
  }

  current_location -= bytes;

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}
typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;
static scratch_buffer_t scratch_buffers[EI_MAX_SCRATCH_BUFFER_COUNT];
static size_t scratch_buffers_ix = 0;

static TfLiteStatus RequestScratchBufferInArena(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  if (scratch_buffers_ix > EI_MAX_SCRATCH_BUFFER_COUNT - 1) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d, reached EI_MAX_SCRATCH_BUFFER_COUNT\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBuffer(ctx, b.bytes);
  if (!b.ptr) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffers[scratch_buffers_ix] = b;
  *buffer_idx = scratch_buffers_ix;

  scratch_buffers_ix++;

  return kTfLiteOk;
}

static void* GetScratchBuffer(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > (int)scratch_buffers_ix) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static const uint16_t TENSOR_IX_UNUSED = 0x7FFF;

static void ResetTensors() {
  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    tflTensors[ix].index = TENSOR_IX_UNUSED;
  }
  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    tflEvalTensors[ix].index = TENSOR_IX_UNUSED;
  }
}

static TfLiteTensor* GetTensor(const struct TfLiteContext* context,
                               int tensor_idx) {

  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    // already used? OK!
    if (tflTensors[ix].index == tensor_idx) {
      return &tflTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_tensor(tensor_idx, &tflTensors[ix].tensor);
      tflTensors[ix].index = tensor_idx;
      return &tflTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_TENSOR_COUNT (%d)\n", MAX_TFL_TENSOR_COUNT);
  return nullptr;
}

static TfLiteEvalTensor* GetEvalTensor(const struct TfLiteContext* context,
                                       int tensor_idx) {

  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    // already used? OK!
    if (tflEvalTensors[ix].index == tensor_idx) {
      return &tflEvalTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflEvalTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_eval_tensor(tensor_idx, &tflEvalTensors[ix].tensor);
      tflEvalTensors[ix].index = tensor_idx;
      return &tflEvalTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_EVAL_COUNT (%d)\n", (int)MAX_TFL_EVAL_COUNT);
  return nullptr;
}

} // namespace

TfLiteStatus trained_model_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    ei_printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;
  ctx.AllocatePersistentBuffer = &AllocatePersistentBuffer;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArena;
  ctx.GetScratchBuffer = &GetScratchBuffer;
  ctx.GetTensor = &GetTensor;
  ctx.GetEvalTensor = &GetEvalTensor;
  ctx.tensors_size = 72;
  for (size_t i = 0; i < 72; ++i) {
    TfLiteTensor tensor;
    init_tflite_tensor(i, &tensor);
    if (tensor.allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tensor.data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }
  if (tensor_boundary > current_location /* end of arena size */) {
    ei_printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }
  registrations[OP_CONV_2D] = Register_CONV_2D();
  registrations[OP_DEPTHWISE_CONV_2D] = Register_DEPTHWISE_CONV_2D();
  registrations[OP_ADD] = Register_ADD();
  registrations[OP_PAD] = Register_PAD();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for (size_t i = 0; i < 28; ++i) {
    tflNodes[i].inputs = nodeData[i].inputs;
    tflNodes[i].outputs = nodeData[i].outputs;
    tflNodes[i].builtin_data = nodeData[i].builtin_data;
tflNodes[i].custom_initial_data = nullptr;
      tflNodes[i].custom_initial_data_size = 0;
if (registrations[nodeData[i].used_op_index].init) {
      tflNodes[i].user_data = registrations[nodeData[i].used_op_index].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
    }
  }
  for (size_t i = 0; i < 28; ++i) {
    if (registrations[nodeData[i].used_op_index].prepare) {
      ResetTensors();

      TfLiteStatus status = registrations[nodeData[i].used_op_index].prepare(&ctx, &tflNodes[i]);
      if (status != kTfLiteOk) {
        return status;
      }
    }
  }
  return kTfLiteOk;
}

static const int inTensorIndices[] = {
  0, 
};
TfLiteStatus trained_model_input(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(inTensorIndices[index], tensor);
  return kTfLiteOk;
}

static const int outTensorIndices[] = {
  71, 
};
TfLiteStatus trained_model_output(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(outTensorIndices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus trained_model_invoke() {
  for (size_t i = 0; i < 28; ++i) {
    ResetTensors();

    TfLiteStatus status = registrations[nodeData[i].used_op_index].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus trained_model_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif

  // scratch buffers are allocated within the arena, so just reset the counter so memory can be reused
  scratch_buffers_ix = 0;

  // overflow buffers are on the heap, so free them first
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
    ei_free(overflow_buffers[ix]);
  }
  overflow_buffers_ix = 0;
  return kTfLiteOk;
}
